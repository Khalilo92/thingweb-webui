{"version":3,"sources":["js/chart.js","js/chartjs-directive.js","js/file-loader.directive.js","js/thingclient.module.js","js/thingclient-ctrl.controller.js"],"names":["root","this","previous","Chart","context","canvas","ctx","width","height","aspectRatio","helpers","retinaScale","defaults","global","animation","animationSteps","animationEasing","showScale","scaleOverride","scaleSteps","scaleStepWidth","scaleStartValue","scaleLineColor","scaleLineWidth","scaleShowLabels","scaleLabel","scaleIntegersOnly","scaleBeginAtZero","scaleFontFamily","scaleFontSize","scaleFontStyle","scaleFontColor","responsive","maintainAspectRatio","showTooltips","tooltipEvents","tooltipFillColor","tooltipFontFamily","tooltipFontSize","tooltipFontStyle","tooltipFontColor","tooltipTitleFontFamily","tooltipTitleFontSize","tooltipTitleFontStyle","tooltipTitleFontColor","tooltipYPadding","tooltipXPadding","tooltipCaretSize","tooltipCornerRadius","tooltipXOffset","tooltipTemplate","multiTooltipTemplate","multiTooltipKeyBackground","onAnimationProgress","onAnimationComplete","types","each","loopable","callback","self","additionalArgs","Array","prototype","slice","call","arguments","length","i","apply","concat","item","clone","obj","objClone","value","key","hasOwnProperty","extend","base","extensionObject","merge","master","args","unshift","indexOf","arrayToSearch","inherits","where","collection","filterCallback","filtered","push","findNextWhere","startIndex","currentItem","findPreviousWhere","extensions","parent","ChartElement","constructor","Surrogate","__super__","noop","uid","id","warn","str","window","console","amd","define","isNumber","n","isNaN","parseFloat","isFinite","max","array","Math","min","getDecimalPlaces","cap","valueToCap","maxValue","minValue","num","toString","split","toRadians","radians","degrees","PI","aliasPixel","getAngleFromPoint","centrePoint","anglePoint","distanceFromXCenter","x","distanceFromYCenter","y","radialDistanceFromCenter","sqrt","angle","atan2","distance","pixelWidth","calculateOrderOfMagnitude","splineCurve","FirstPoint","MiddlePoint","AfterPoint","t","d01","pow","d12","fa","fb","inner","outer","val","floor","log","LN10","template","calculateScaleRange","valuesArray","drawingSize","textSize","startFromZero","integersOnly","minSteps","maxSteps","skipFitting","valueRange","abs","rangeOrderOfMagnitude","graphMax","ceil","graphMin","graphRange","stepValue","numberOfSteps","round","steps","templateString","valuesObject","tmpl","data","fn","test","Function","replace","join","cache","easingEffects","generateLabels","labelsArray","labelTemplateString","index","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","cos","easeOutSine","sin","easeInOutSine","easeInExpo","easeOutExpo","easeInOutExpo","easeInCirc","easeOutCirc","easeInOutCirc","easeInElastic","s","p","a","asin","easeOutElastic","easeInOutElastic","easeInBack","easeOutBack","easeInOutBack","easeInBounce","easeOutBounce","easeInOutBounce","requestAnimFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","setTimeout","addEvent","cancelAnimFrame","cancelAnimationFrame","webkitCancelAnimationFrame","mozCancelAnimationFrame","oCancelAnimationFrame","msCancelAnimationFrame","clearTimeout","animationLoop","totalSteps","easingString","onProgress","onComplete","chartInstance","currentStep","easingFunction","animationFrame","stepDecimal","easeDecimal","getRelativePosition","evt","mouseX","mouseY","e","originalEvent","currentTarget","srcElement","boundingRect","getBoundingClientRect","touches","clientX","left","clientY","top","node","eventType","method","addEventListener","attachEvent","removeEvent","handler","removeEventListener","detachEvent","unbindEvents","bindEvents","arrayOfEvents","events","eventName","chart","getMaximumWidth","domNode","container","parentNode","clientWidth","getMaximumHeight","clientHeight","getMaximumSize","devicePixelRatio","style","scale","clear","clearRect","fontString","pixelSize","fontStyle","fontFamily","longestText","font","arrayOfStrings","longest","string","textWidth","measureText","drawRoundedRectangle","radius","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","instances","Type","options","resize","initialize","stop","newWidth","newHeight","reflow","render","draw","generateLegend","legendTemplate","destroy","showTooltip","ChartElements","forceRedraw","activeElements","isChanged","Elements","changed","element","datasets","dataArray","dataIndex","points","bars","segments","tooltipLabels","tooltipColors","medianPosition","dataCollection","xMax","yMax","xMin","yMin","xPositions","yPositions","dataset","hasValue","fill","_saved","fillColor","stroke","strokeColor","MultiTooltip","xPadding","yPadding","xOffset","textColor","fontSize","titleTextColor","titleFontFamily","titleFontStyle","titleFontSize","cornerRadius","labels","legendColors","legendColorBackground","title","label","Element","tooltipPosition","Tooltip","caretHeight","text","toBase64Image","toDataURL","ChartType","name","chartName","baseDefaults","config","configuration","save","restore","props","update","newProps","transition","ease","Point","display","inRange","chartX","chartY","hitDetectionRange","hitDetectionRadius","arc","strokeStyle","lineWidth","strokeWidth","fillStyle","Arc","pointRelativePosition","betweenAngles","startAngle","endAngle","withinRadius","innerRadius","outerRadius","centreAngle","rangeFromCentre","animationPercent","lineJoin","showStroke","Rectangle","halfWidth","leftX","rightX","halfStroke","xAlign","yAlign","caretPadding","tooltipWidth","tooltipRectHeight","tooltipHeight","tooltipX","tooltipY","textAlign","textBaseline","fillText","titleFont","titleWidth","labelWidth","longestTextWidth","halfHeight","getLineHeight","baseLineHeight","afterTitleIndex","fillRect","Scale","fit","buildYLabels","yLabels","stepDecimalPlaces","toFixed","yLabelWidth","showLabels","addXLabel","xLabels","valuesCount","removeXLabel","shift","startPoint","endPoint","padding","cachedYLabelWidth","cachedHeight","calculateYRange","calculateXLabelRotation","firstRotated","lastRotated","firstWidth","lastWidth","xScalePaddingRight","xScalePaddingLeft","xLabelRotation","cosRotation","originalLabelWidth","xLabelWidth","xGridWidth","calculateX","drawingArea","calculateY","scalingFactor","innerWidth","valueWidth","valueOffset","offsetGridLines","yLabelGap","xStart","labelString","yLabelCenter","linePositionY","gridLineWidth","gridLineColor","lineColor","xPos","linePos","isRotated","translate","rotate","RadialScale","size","backdropPaddingY","calculateCenterOffset","lineArc","setScaleSize","getCircumference","pointPosition","halfTextWidth","furthestRightIndex","furthestRightAngle","furthestLeftIndex","furthestLeftAngle","xProtrusionLeft","xProtrusionRight","radiusReductionRight","radiusReductionLeft","largestPossibleRadius","pointLabelFontSize","furthestRight","furthestLeft","pointLabelFontStyle","pointLabelFontFamily","getPointPosition","getIndexAngle","setCenterPoint","leftMovement","rightMovement","maxRight","maxLeft","xCenter","yCenter","angleMultiplier","distanceFromCenter","thisAngle","yCenterOffset","yHeight","showLabelBackdrop","backdropColor","backdropPaddingX","fontColor","angleLineWidth","angleLineColor","outerPosition","pointLabelPosition","pointLabelFontColor","labelsCount","halfLabelsCount","quarterLabelsCount","upperHalf","exactQuarter","timeout","instance","module","exports","noConflict","defaultConfig","scaleShowGridLines","scaleGridLineColor","scaleGridLineWidth","barShowStroke","barStrokeWidth","barValueSpacing","barDatasetSpacing","ScaleClass","calculateBarX","datasetCount","datasetIndex","barIndex","xWidth","calculateBaseWidth","xAbsolute","barWidth","calculateBarWidth","baseWidth","activeBars","type","getBarsAtEvent","eachBars","bar","activeBar","highlightFill","highlightStroke","BarClass","datasetObject","dataPoint","datasetLabel","buildScale","activeElement","barsArray","eventPosition","datasetIterator","dataTotal","values","scaleOptions","beginAtZero","currentHeight","updatedRanges","addData","removeData","newScaleProps","easingDecimal","segmentShowStroke","segmentStrokeColor","segmentStrokeWidth","percentageInnerCutout","animateRotate","animateScale","SegmentArc","activeSegments","getSegmentsAtEvent","segment","activeSegment","highlightColor","calculateTotal","datapoint","segmentsArray","location","atIndex","silent","splice","color","highlight","circumference","calculateCircumference","total","indexToDelete","animDecimal","Doughnut","bezierCurve","bezierCurveTension","pointDot","pointDotRadius","pointDotStrokeWidth","pointHitDetectionRadius","datasetStroke","datasetStrokeWidth","datasetFill","PointClass","activePoints","getPointsAtEvent","eachPoints","point","activePoint","pointColor","pointStrokeColor","pointHighlightFill","pointHighlightStroke","pointsArray","nextPoint","previousPoint","pointsWithValues","tension","controlPoints","bezierCurveTo","scaleShowLabelBackdrop","scaleBackdropColor","scaleBackdropPaddingY","scaleBackdropPaddingX","scaleShowLine","updateScaleRange","datapoints","scaleSizes","angleShowLineOut","activePointsCollection","mousePosition","fromCenter","anglePerIndex","pointIndex","totalDataArray","angular","directive","baseHeight","restrict","scope","chartObject","chartOptions","link","attrs","find","getContext","$watch","attr","chartType","forEach","idx","dsid","nset","$window","require","el","ctrl","fileReader","FileReader","onload","$setViewValue","result","$apply","$eval","onprogress","event","$total","$loaded","loaded","onerror","$error","error","fileType","bind","fileName","target","files","readAsText","readAsDataURL","$mdThemingProvider","theme","primaryPalette","accentPalette","controller","$scope","$interval","$http","$mdSidenav","$mdDialog","$mdToast","TdParser","ThingClient","things","selected","autoReloaded","showRestError","errorObj","msg","url","status","statusText","showError","errorMsg","showSimple","reloadAuto","property","readProperty","addThingFromUrl","fromUrl","then","addThing","addThingFromJson","json","parseJson","addThingFromObject","td","createThing","thing","updateState","properties","writeProperty","callAction","action","param","toggleList","toggle","selectThing","openUriDialog","$event","show","clickOutsideToClose","uri","close","cancel","submit","hide","controllerAs","templateUrl","targetEvent","addFileFromPicker","filePickerId","document","querySelector","click","toggleAuto","autoUpdate","addCatalog","get","response","catalog"],"mappings":"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","file":"assets/js/app.min.js","sourcesContent":["/*!\r\n * Chart.js\r\n * http://chartjs.org/\r\n * Version: 1.0.1-beta.4\r\n *\r\n * Copyright 2014 Nick Downie\r\n * Released under the MIT license\r\n * https://github.com/nnnick/Chart.js/blob/master/LICENSE.md\r\n */\r\n\r\n\r\n(function(){\r\n\r\n\t\"use strict\";\r\n\r\n\t//Declare root variable - window in the browser, global on the server\r\n\tvar root = this,\r\n\t\tprevious = root.Chart;\r\n\r\n\t//Occupy the global variable of Chart, and create a simple base class\r\n\tvar Chart = function(context){\r\n\t\tvar chart = this;\r\n\t\tthis.canvas = context.canvas;\r\n\r\n\t\tthis.ctx = context;\r\n\r\n\t\t//Variables global to the chart\r\n\t\tvar width = this.width = context.canvas.width;\r\n\t\tvar height = this.height = context.canvas.height;\r\n\t\tthis.aspectRatio = this.width / this.height;\r\n\t\t//High pixel density displays - multiply the size of the canvas height/width by the device pixel ratio, then scale.\r\n\t\thelpers.retinaScale(this);\r\n\r\n\t\treturn this;\r\n\t};\r\n\t//Globally expose the defaults to allow for user updating/changing\r\n\tChart.defaults = {\r\n\t\tglobal: {\r\n\t\t\t// Boolean - Whether to animate the chart\r\n\t\t\tanimation: true,\r\n\r\n\t\t\t// Number - Number of animation steps\r\n\t\t\tanimationSteps: 60,\r\n\r\n\t\t\t// String - Animation easing effect\r\n\t\t\tanimationEasing: \"easeOutQuart\",\r\n\r\n\t\t\t// Boolean - If we should show the scale at all\r\n\t\t\tshowScale: true,\r\n\r\n\t\t\t// Boolean - If we want to override with a hard coded scale\r\n\t\t\tscaleOverride: false,\r\n\r\n\t\t\t// ** Required if scaleOverride is true **\r\n\t\t\t// Number - The number of steps in a hard coded scale\r\n\t\t\tscaleSteps: null,\r\n\t\t\t// Number - The value jump in the hard coded scale\r\n\t\t\tscaleStepWidth: null,\r\n\t\t\t// Number - The scale starting value\r\n\t\t\tscaleStartValue: null,\r\n\r\n\t\t\t// String - Colour of the scale line\r\n\t\t\tscaleLineColor: \"rgba(0,0,0,.1)\",\r\n\r\n\t\t\t// Number - Pixel width of the scale line\r\n\t\t\tscaleLineWidth: 1,\r\n\r\n\t\t\t// Boolean - Whether to show labels on the scale\r\n\t\t\tscaleShowLabels: true,\r\n\r\n\t\t\t// Interpolated JS string - can access value\r\n\t\t\tscaleLabel: \"<%=value%>\",\r\n\r\n\t\t\t// Boolean - Whether the scale should stick to integers, and not show any floats even if drawing space is there\r\n\t\t\tscaleIntegersOnly: true,\r\n\r\n\t\t\t// Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value\r\n\t\t\tscaleBeginAtZero: false,\r\n\r\n\t\t\t// String - Scale label font declaration for the scale label\r\n\t\t\tscaleFontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\r\n\r\n\t\t\t// Number - Scale label font size in pixels\r\n\t\t\tscaleFontSize: 12,\r\n\r\n\t\t\t// String - Scale label font weight style\r\n\t\t\tscaleFontStyle: \"normal\",\r\n\r\n\t\t\t// String - Scale label font colour\r\n\t\t\tscaleFontColor: \"#666\",\r\n\r\n\t\t\t// Boolean - whether or not the chart should be responsive and resize when the browser does.\r\n\t\t\tresponsive: false,\r\n\r\n                        // Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container\r\n                        maintainAspectRatio: true,\r\n\r\n\t\t\t// Boolean - Determines whether to draw tooltips on the canvas or not - attaches events to touchmove & mousemove\r\n\t\t\tshowTooltips: true,\r\n\r\n\t\t\t// Array - Array of string names to attach tooltip events\r\n\t\t\ttooltipEvents: [\"mousemove\", \"touchstart\", \"touchmove\", \"mouseout\"],\r\n\r\n\t\t\t// String - Tooltip background colour\r\n\t\t\ttooltipFillColor: \"rgba(0,0,0,0.8)\",\r\n\r\n\t\t\t// String - Tooltip label font declaration for the scale label\r\n\t\t\ttooltipFontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\r\n\r\n\t\t\t// Number - Tooltip label font size in pixels\r\n\t\t\ttooltipFontSize: 14,\r\n\r\n\t\t\t// String - Tooltip font weight style\r\n\t\t\ttooltipFontStyle: \"normal\",\r\n\r\n\t\t\t// String - Tooltip label font colour\r\n\t\t\ttooltipFontColor: \"#fff\",\r\n\r\n\t\t\t// String - Tooltip title font declaration for the scale label\r\n\t\t\ttooltipTitleFontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\r\n\r\n\t\t\t// Number - Tooltip title font size in pixels\r\n\t\t\ttooltipTitleFontSize: 14,\r\n\r\n\t\t\t// String - Tooltip title font weight style\r\n\t\t\ttooltipTitleFontStyle: \"bold\",\r\n\r\n\t\t\t// String - Tooltip title font colour\r\n\t\t\ttooltipTitleFontColor: \"#fff\",\r\n\r\n\t\t\t// Number - pixel width of padding around tooltip text\r\n\t\t\ttooltipYPadding: 6,\r\n\r\n\t\t\t// Number - pixel width of padding around tooltip text\r\n\t\t\ttooltipXPadding: 6,\r\n\r\n\t\t\t// Number - Size of the caret on the tooltip\r\n\t\t\ttooltipCaretSize: 8,\r\n\r\n\t\t\t// Number - Pixel radius of the tooltip border\r\n\t\t\ttooltipCornerRadius: 6,\r\n\r\n\t\t\t// Number - Pixel offset from point x to tooltip edge\r\n\t\t\ttooltipXOffset: 10,\r\n\r\n\t\t\t// String - Template string for single tooltips\r\n\t\t\ttooltipTemplate: \"<%if (label){%><%=label%>: <%}%><%= value %>\",\r\n\r\n\t\t\t// String - Template string for single tooltips\r\n\t\t\tmultiTooltipTemplate: \"<%= value %>\",\r\n\r\n\t\t\t// String - Colour behind the legend colour block\r\n\t\t\tmultiTooltipKeyBackground: '#fff',\r\n\r\n\t\t\t// Function - Will fire on animation progression.\r\n\t\t\tonAnimationProgress: function(){},\r\n\r\n\t\t\t// Function - Will fire on animation completion.\r\n\t\t\tonAnimationComplete: function(){}\r\n\r\n\t\t}\r\n\t};\r\n\r\n\t//Create a dictionary of chart types, to allow for extension of existing types\r\n\tChart.types = {};\r\n\r\n\t//Global Chart helpers object for utility methods and classes\r\n\tvar helpers = Chart.helpers = {};\r\n\r\n\t\t//-- Basic js utility methods\r\n\tvar each = helpers.each = function(loopable,callback,self){\r\n\t\t\tvar additionalArgs = Array.prototype.slice.call(arguments, 3);\r\n\t\t\t// Check to see if null or undefined firstly.\r\n\t\t\tif (loopable){\r\n\t\t\t\tif (loopable.length === +loopable.length){\r\n\t\t\t\t\tvar i;\r\n\t\t\t\t\tfor (i=0; i<loopable.length; i++){\r\n\t\t\t\t\t\tcallback.apply(self,[loopable[i], i].concat(additionalArgs));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tfor (var item in loopable){\r\n\t\t\t\t\t\tcallback.apply(self,[loopable[item],item].concat(additionalArgs));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tclone = helpers.clone = function(obj){\r\n\t\t\tvar objClone = {};\r\n\t\t\teach(obj,function(value,key){\r\n\t\t\t\tif (obj.hasOwnProperty(key)) objClone[key] = value;\r\n\t\t\t});\r\n\t\t\treturn objClone;\r\n\t\t},\r\n\t\textend = helpers.extend = function(base){\r\n\t\t\teach(Array.prototype.slice.call(arguments,1), function(extensionObject) {\r\n\t\t\t\teach(extensionObject,function(value,key){\r\n\t\t\t\t\tif (extensionObject.hasOwnProperty(key)) base[key] = value;\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t\treturn base;\r\n\t\t},\r\n\t\tmerge = helpers.merge = function(base,master){\r\n\t\t\t//Merge properties in left object over to a shallow clone of object right.\r\n\t\t\tvar args = Array.prototype.slice.call(arguments,0);\r\n\t\t\targs.unshift({});\r\n\t\t\treturn extend.apply(null, args);\r\n\t\t},\r\n\t\tindexOf = helpers.indexOf = function(arrayToSearch, item){\r\n\t\t\tif (Array.prototype.indexOf) {\r\n\t\t\t\treturn arrayToSearch.indexOf(item);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tfor (var i = 0; i < arrayToSearch.length; i++) {\r\n\t\t\t\t\tif (arrayToSearch[i] === item) return i;\r\n\t\t\t\t}\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t},\r\n\t\twhere = helpers.where = function(collection, filterCallback){\r\n\t\t\tvar filtered = [];\r\n\r\n\t\t\thelpers.each(collection, function(item){\r\n\t\t\t\tif (filterCallback(item)){\r\n\t\t\t\t\tfiltered.push(item);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\treturn filtered;\r\n\t\t},\r\n\t\tfindNextWhere = helpers.findNextWhere = function(arrayToSearch, filterCallback, startIndex){\r\n\t\t\t// Default to start of the array\r\n\t\t\tif (!startIndex){\r\n\t\t\t\tstartIndex = -1;\r\n\t\t\t}\r\n\t\t\tfor (var i = startIndex + 1; i < arrayToSearch.length; i++) {\r\n\t\t\t\tvar currentItem = arrayToSearch[i];\r\n\t\t\t\tif (filterCallback(currentItem)){\r\n\t\t\t\t\treturn currentItem;\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t},\r\n\t\tfindPreviousWhere = helpers.findPreviousWhere = function(arrayToSearch, filterCallback, startIndex){\r\n\t\t\t// Default to end of the array\r\n\t\t\tif (!startIndex){\r\n\t\t\t\tstartIndex = arrayToSearch.length;\r\n\t\t\t}\r\n\t\t\tfor (var i = startIndex - 1; i >= 0; i--) {\r\n\t\t\t\tvar currentItem = arrayToSearch[i];\r\n\t\t\t\tif (filterCallback(currentItem)){\r\n\t\t\t\t\treturn currentItem;\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t},\r\n\t\tinherits = helpers.inherits = function(extensions){\r\n\t\t\t//Basic javascript inheritance based on the model created in Backbone.js\r\n\t\t\tvar parent = this;\r\n\t\t\tvar ChartElement = (extensions && extensions.hasOwnProperty(\"constructor\")) ? extensions.constructor : function(){ return parent.apply(this, arguments); };\r\n\r\n\t\t\tvar Surrogate = function(){ this.constructor = ChartElement;};\r\n\t\t\tSurrogate.prototype = parent.prototype;\r\n\t\t\tChartElement.prototype = new Surrogate();\r\n\r\n\t\t\tChartElement.extend = inherits;\r\n\r\n\t\t\tif (extensions) extend(ChartElement.prototype, extensions);\r\n\r\n\t\t\tChartElement.__super__ = parent.prototype;\r\n\r\n\t\t\treturn ChartElement;\r\n\t\t},\r\n\t\tnoop = helpers.noop = function(){},\r\n\t\tuid = helpers.uid = (function(){\r\n\t\t\tvar id=0;\r\n\t\t\treturn function(){\r\n\t\t\t\treturn \"chart-\" + id++;\r\n\t\t\t};\r\n\t\t})(),\r\n\t\twarn = helpers.warn = function(str){\r\n\t\t\t//Method for warning of errors\r\n\t\t\tif (window.console && typeof window.console.warn == \"function\") console.warn(str);\r\n\t\t},\r\n\t\tamd = helpers.amd = (typeof define == 'function' && define.amd),\r\n\t\t//-- Math methods\r\n\t\tisNumber = helpers.isNumber = function(n){\r\n\t\t\treturn !isNaN(parseFloat(n)) && isFinite(n);\r\n\t\t},\r\n\t\tmax = helpers.max = function(array){\r\n\t\t\treturn Math.max.apply( Math, array );\r\n\t\t},\r\n\t\tmin = helpers.min = function(array){\r\n\t\t\treturn Math.min.apply( Math, array );\r\n\t\t},\r\n\t\tcap = helpers.cap = function(valueToCap,maxValue,minValue){\r\n\t\t\tif(isNumber(maxValue)) {\r\n\t\t\t\tif( valueToCap > maxValue ) {\r\n\t\t\t\t\treturn maxValue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if(isNumber(minValue)){\r\n\t\t\t\tif ( valueToCap < minValue ){\r\n\t\t\t\t\treturn minValue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn valueToCap;\r\n\t\t},\r\n\t\tgetDecimalPlaces = helpers.getDecimalPlaces = function(num){\r\n\t\t\tif (num%1!==0 && isNumber(num)){\r\n\t\t\t\treturn num.toString().split(\".\")[1].length;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t},\r\n\t\ttoRadians = helpers.radians = function(degrees){\r\n\t\t\treturn degrees * (Math.PI/180);\r\n\t\t},\r\n\t\t// Gets the angle from vertical upright to the point about a centre.\r\n\t\tgetAngleFromPoint = helpers.getAngleFromPoint = function(centrePoint, anglePoint){\r\n\t\t\tvar distanceFromXCenter = anglePoint.x - centrePoint.x,\r\n\t\t\t\tdistanceFromYCenter = anglePoint.y - centrePoint.y,\r\n\t\t\t\tradialDistanceFromCenter = Math.sqrt( distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\r\n\r\n\r\n\t\t\tvar angle = Math.PI * 2 + Math.atan2(distanceFromYCenter, distanceFromXCenter);\r\n\r\n\t\t\t//If the segment is in the top left quadrant, we need to add another rotation to the angle\r\n\t\t\tif (distanceFromXCenter < 0 && distanceFromYCenter < 0){\r\n\t\t\t\tangle += Math.PI*2;\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tangle: angle,\r\n\t\t\t\tdistance: radialDistanceFromCenter\r\n\t\t\t};\r\n\t\t},\r\n\t\taliasPixel = helpers.aliasPixel = function(pixelWidth){\r\n\t\t\treturn (pixelWidth % 2 === 0) ? 0 : 0.5;\r\n\t\t},\r\n\t\tsplineCurve = helpers.splineCurve = function(FirstPoint,MiddlePoint,AfterPoint,t){\r\n\t\t\t//Props to Rob Spencer at scaled innovation for his post on splining between points\r\n\t\t\t//http://scaledinnovation.com/analytics/splines/aboutSplines.html\r\n\t\t\tvar d01=Math.sqrt(Math.pow(MiddlePoint.x-FirstPoint.x,2)+Math.pow(MiddlePoint.y-FirstPoint.y,2)),\r\n\t\t\t\td12=Math.sqrt(Math.pow(AfterPoint.x-MiddlePoint.x,2)+Math.pow(AfterPoint.y-MiddlePoint.y,2)),\r\n\t\t\t\tfa=t*d01/(d01+d12),// scaling factor for triangle Ta\r\n\t\t\t\tfb=t*d12/(d01+d12);\r\n\t\t\treturn {\r\n\t\t\t\tinner : {\r\n\t\t\t\t\tx : MiddlePoint.x-fa*(AfterPoint.x-FirstPoint.x),\r\n\t\t\t\t\ty : MiddlePoint.y-fa*(AfterPoint.y-FirstPoint.y)\r\n\t\t\t\t},\r\n\t\t\t\touter : {\r\n\t\t\t\t\tx: MiddlePoint.x+fb*(AfterPoint.x-FirstPoint.x),\r\n\t\t\t\t\ty : MiddlePoint.y+fb*(AfterPoint.y-FirstPoint.y)\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t},\r\n\t\tcalculateOrderOfMagnitude = helpers.calculateOrderOfMagnitude = function(val){\r\n\t\t\treturn Math.floor(Math.log(val) / Math.LN10);\r\n\t\t},\r\n\t\tcalculateScaleRange = helpers.calculateScaleRange = function(valuesArray, drawingSize, textSize, startFromZero, integersOnly){\r\n\r\n\t\t\t//Set a minimum step of two - a point at the top of the graph, and a point at the base\r\n\t\t\tvar minSteps = 2,\r\n\t\t\t\tmaxSteps = Math.floor(drawingSize/(textSize * 1.5)),\r\n\t\t\t\tskipFitting = (minSteps >= maxSteps);\r\n\r\n\t\t\tvar maxValue = max(valuesArray),\r\n\t\t\t\tminValue = min(valuesArray);\r\n\r\n\t\t\t// We need some degree of seperation here to calculate the scales if all the values are the same\r\n\t\t\t// Adding/minusing 0.5 will give us a range of 1.\r\n\t\t\tif (maxValue === minValue){\r\n\t\t\t\tmaxValue += 0.5;\r\n\t\t\t\t// So we don't end up with a graph with a negative start value if we've said always start from zero\r\n\t\t\t\tif (minValue >= 0.5 && !startFromZero){\r\n\t\t\t\t\tminValue -= 0.5;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// Make up a whole number above the values\r\n\t\t\t\t\tmaxValue += 0.5;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar\tvalueRange = Math.abs(maxValue - minValue),\r\n\t\t\t\trangeOrderOfMagnitude = calculateOrderOfMagnitude(valueRange),\r\n\t\t\t\tgraphMax = Math.ceil(maxValue / (1 * Math.pow(10, rangeOrderOfMagnitude))) * Math.pow(10, rangeOrderOfMagnitude),\r\n\t\t\t\tgraphMin = (startFromZero) ? 0 : Math.floor(minValue / (1 * Math.pow(10, rangeOrderOfMagnitude))) * Math.pow(10, rangeOrderOfMagnitude),\r\n\t\t\t\tgraphRange = graphMax - graphMin,\r\n\t\t\t\tstepValue = Math.pow(10, rangeOrderOfMagnitude),\r\n\t\t\t\tnumberOfSteps = Math.round(graphRange / stepValue);\r\n\r\n\t\t\t//If we have more space on the graph we'll use it to give more definition to the data\r\n\t\t\twhile((numberOfSteps > maxSteps || (numberOfSteps * 2) < maxSteps) && !skipFitting) {\r\n\t\t\t\tif(numberOfSteps > maxSteps){\r\n\t\t\t\t\tstepValue *=2;\r\n\t\t\t\t\tnumberOfSteps = Math.round(graphRange/stepValue);\r\n\t\t\t\t\t// Don't ever deal with a decimal number of steps - cancel fitting and just use the minimum number of steps.\r\n\t\t\t\t\tif (numberOfSteps % 1 !== 0){\r\n\t\t\t\t\t\tskipFitting = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//We can fit in double the amount of scale points on the scale\r\n\t\t\t\telse{\r\n\t\t\t\t\t//If user has declared ints only, and the step value isn't a decimal\r\n\t\t\t\t\tif (integersOnly && rangeOrderOfMagnitude >= 0){\r\n\t\t\t\t\t\t//If the user has said integers only, we need to check that making the scale more granular wouldn't make it a float\r\n\t\t\t\t\t\tif(stepValue/2 % 1 === 0){\r\n\t\t\t\t\t\t\tstepValue /=2;\r\n\t\t\t\t\t\t\tnumberOfSteps = Math.round(graphRange/stepValue);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//If it would make it a float break out of the loop\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//If the scale doesn't have to be an int, make the scale more granular anyway.\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tstepValue /=2;\r\n\t\t\t\t\t\tnumberOfSteps = Math.round(graphRange/stepValue);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (skipFitting){\r\n\t\t\t\tnumberOfSteps = minSteps;\r\n\t\t\t\tstepValue = graphRange / numberOfSteps;\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tsteps : numberOfSteps,\r\n\t\t\t\tstepValue : stepValue,\r\n\t\t\t\tmin : graphMin,\r\n\t\t\t\tmax\t: graphMin + (numberOfSteps * stepValue)\r\n\t\t\t};\r\n\r\n\t\t},\r\n\t\t/* jshint ignore:start */\r\n\t\t// Blows up jshint errors based on the new Function constructor\r\n\t\t//Templating methods\r\n\t\t//Javascript micro templating by John Resig - source at http://ejohn.org/blog/javascript-micro-templating/\r\n\t\ttemplate = helpers.template = function(templateString, valuesObject){\r\n\t\t\t // If templateString is function rather than string-template - call the function for valuesObject\r\n\t\t\tif(templateString instanceof Function){\r\n\t\t\t \treturn templateString(valuesObject);\r\n\t\t \t}\r\n\r\n\t\t\tvar cache = {};\r\n\t\t\tfunction tmpl(str, data){\r\n\t\t\t\t// Figure out if we're getting a template, or if we need to\r\n\t\t\t\t// load the template - and be sure to cache the result.\r\n\t\t\t\tvar fn = !/\\W/.test(str) ?\r\n\t\t\t\tcache[str] = cache[str] :\r\n\r\n\t\t\t\t// Generate a reusable function that will serve as a template\r\n\t\t\t\t// generator (and which will be cached).\r\n\t\t\t\tnew Function(\"obj\",\r\n\t\t\t\t\t\"var p=[],print=function(){p.push.apply(p,arguments);};\" +\r\n\r\n\t\t\t\t\t// Introduce the data as local variables using with(){}\r\n\t\t\t\t\t\"with(obj){p.push('\" +\r\n\r\n\t\t\t\t\t// Convert the template into pure JavaScript\r\n\t\t\t\t\tstr\r\n\t\t\t\t\t\t.replace(/[\\r\\t\\n]/g, \" \")\r\n\t\t\t\t\t\t.split(\"<%\").join(\"\\t\")\r\n\t\t\t\t\t\t.replace(/((^|%>)[^\\t]*)'/g, \"$1\\r\")\r\n\t\t\t\t\t\t.replace(/\\t=(.*?)%>/g, \"',$1,'\")\r\n\t\t\t\t\t\t.split(\"\\t\").join(\"');\")\r\n\t\t\t\t\t\t.split(\"%>\").join(\"p.push('\")\r\n\t\t\t\t\t\t.split(\"\\r\").join(\"\\\\'\") +\r\n\t\t\t\t\t\"');}return p.join('');\"\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// Provide some basic currying to the user\r\n\t\t\t\treturn data ? fn( data ) : fn;\r\n\t\t\t}\r\n\t\t\treturn tmpl(templateString,valuesObject);\r\n\t\t},\r\n\t\t/* jshint ignore:end */\r\n\t\tgenerateLabels = helpers.generateLabels = function(templateString,numberOfSteps,graphMin,stepValue){\r\n\t\t\tvar labelsArray = new Array(numberOfSteps);\r\n\t\t\tif (labelTemplateString){\r\n\t\t\t\teach(labelsArray,function(val,index){\r\n\t\t\t\t\tlabelsArray[index] = template(templateString,{value: (graphMin + (stepValue*(index+1)))});\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn labelsArray;\r\n\t\t},\r\n\t\t//--Animation methods\r\n\t\t//Easing functions adapted from Robert Penner's easing equations\r\n\t\t//http://www.robertpenner.com/easing/\r\n\t\teasingEffects = helpers.easingEffects = {\r\n\t\t\tlinear: function (t) {\r\n\t\t\t\treturn t;\r\n\t\t\t},\r\n\t\t\teaseInQuad: function (t) {\r\n\t\t\t\treturn t * t;\r\n\t\t\t},\r\n\t\t\teaseOutQuad: function (t) {\r\n\t\t\t\treturn -1 * t * (t - 2);\r\n\t\t\t},\r\n\t\t\teaseInOutQuad: function (t) {\r\n\t\t\t\tif ((t /= 1 / 2) < 1) return 1 / 2 * t * t;\r\n\t\t\t\treturn -1 / 2 * ((--t) * (t - 2) - 1);\r\n\t\t\t},\r\n\t\t\teaseInCubic: function (t) {\r\n\t\t\t\treturn t * t * t;\r\n\t\t\t},\r\n\t\t\teaseOutCubic: function (t) {\r\n\t\t\t\treturn 1 * ((t = t / 1 - 1) * t * t + 1);\r\n\t\t\t},\r\n\t\t\teaseInOutCubic: function (t) {\r\n\t\t\t\tif ((t /= 1 / 2) < 1) return 1 / 2 * t * t * t;\r\n\t\t\t\treturn 1 / 2 * ((t -= 2) * t * t + 2);\r\n\t\t\t},\r\n\t\t\teaseInQuart: function (t) {\r\n\t\t\t\treturn t * t * t * t;\r\n\t\t\t},\r\n\t\t\teaseOutQuart: function (t) {\r\n\t\t\t\treturn -1 * ((t = t / 1 - 1) * t * t * t - 1);\r\n\t\t\t},\r\n\t\t\teaseInOutQuart: function (t) {\r\n\t\t\t\tif ((t /= 1 / 2) < 1) return 1 / 2 * t * t * t * t;\r\n\t\t\t\treturn -1 / 2 * ((t -= 2) * t * t * t - 2);\r\n\t\t\t},\r\n\t\t\teaseInQuint: function (t) {\r\n\t\t\t\treturn 1 * (t /= 1) * t * t * t * t;\r\n\t\t\t},\r\n\t\t\teaseOutQuint: function (t) {\r\n\t\t\t\treturn 1 * ((t = t / 1 - 1) * t * t * t * t + 1);\r\n\t\t\t},\r\n\t\t\teaseInOutQuint: function (t) {\r\n\t\t\t\tif ((t /= 1 / 2) < 1) return 1 / 2 * t * t * t * t * t;\r\n\t\t\t\treturn 1 / 2 * ((t -= 2) * t * t * t * t + 2);\r\n\t\t\t},\r\n\t\t\teaseInSine: function (t) {\r\n\t\t\t\treturn -1 * Math.cos(t / 1 * (Math.PI / 2)) + 1;\r\n\t\t\t},\r\n\t\t\teaseOutSine: function (t) {\r\n\t\t\t\treturn 1 * Math.sin(t / 1 * (Math.PI / 2));\r\n\t\t\t},\r\n\t\t\teaseInOutSine: function (t) {\r\n\t\t\t\treturn -1 / 2 * (Math.cos(Math.PI * t / 1) - 1);\r\n\t\t\t},\r\n\t\t\teaseInExpo: function (t) {\r\n\t\t\t\treturn (t === 0) ? 1 : 1 * Math.pow(2, 10 * (t / 1 - 1));\r\n\t\t\t},\r\n\t\t\teaseOutExpo: function (t) {\r\n\t\t\t\treturn (t === 1) ? 1 : 1 * (-Math.pow(2, -10 * t / 1) + 1);\r\n\t\t\t},\r\n\t\t\teaseInOutExpo: function (t) {\r\n\t\t\t\tif (t === 0) return 0;\r\n\t\t\t\tif (t === 1) return 1;\r\n\t\t\t\tif ((t /= 1 / 2) < 1) return 1 / 2 * Math.pow(2, 10 * (t - 1));\r\n\t\t\t\treturn 1 / 2 * (-Math.pow(2, -10 * --t) + 2);\r\n\t\t\t},\r\n\t\t\teaseInCirc: function (t) {\r\n\t\t\t\tif (t >= 1) return t;\r\n\t\t\t\treturn -1 * (Math.sqrt(1 - (t /= 1) * t) - 1);\r\n\t\t\t},\r\n\t\t\teaseOutCirc: function (t) {\r\n\t\t\t\treturn 1 * Math.sqrt(1 - (t = t / 1 - 1) * t);\r\n\t\t\t},\r\n\t\t\teaseInOutCirc: function (t) {\r\n\t\t\t\tif ((t /= 1 / 2) < 1) return -1 / 2 * (Math.sqrt(1 - t * t) - 1);\r\n\t\t\t\treturn 1 / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1);\r\n\t\t\t},\r\n\t\t\teaseInElastic: function (t) {\r\n\t\t\t\tvar s = 1.70158;\r\n\t\t\t\tvar p = 0;\r\n\t\t\t\tvar a = 1;\r\n\t\t\t\tif (t === 0) return 0;\r\n\t\t\t\tif ((t /= 1) == 1) return 1;\r\n\t\t\t\tif (!p) p = 1 * 0.3;\r\n\t\t\t\tif (a < Math.abs(1)) {\r\n\t\t\t\t\ta = 1;\r\n\t\t\t\t\ts = p / 4;\r\n\t\t\t\t} else s = p / (2 * Math.PI) * Math.asin(1 / a);\r\n\t\t\t\treturn -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));\r\n\t\t\t},\r\n\t\t\teaseOutElastic: function (t) {\r\n\t\t\t\tvar s = 1.70158;\r\n\t\t\t\tvar p = 0;\r\n\t\t\t\tvar a = 1;\r\n\t\t\t\tif (t === 0) return 0;\r\n\t\t\t\tif ((t /= 1) == 1) return 1;\r\n\t\t\t\tif (!p) p = 1 * 0.3;\r\n\t\t\t\tif (a < Math.abs(1)) {\r\n\t\t\t\t\ta = 1;\r\n\t\t\t\t\ts = p / 4;\r\n\t\t\t\t} else s = p / (2 * Math.PI) * Math.asin(1 / a);\r\n\t\t\t\treturn a * Math.pow(2, -10 * t) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) + 1;\r\n\t\t\t},\r\n\t\t\teaseInOutElastic: function (t) {\r\n\t\t\t\tvar s = 1.70158;\r\n\t\t\t\tvar p = 0;\r\n\t\t\t\tvar a = 1;\r\n\t\t\t\tif (t === 0) return 0;\r\n\t\t\t\tif ((t /= 1 / 2) == 2) return 1;\r\n\t\t\t\tif (!p) p = 1 * (0.3 * 1.5);\r\n\t\t\t\tif (a < Math.abs(1)) {\r\n\t\t\t\t\ta = 1;\r\n\t\t\t\t\ts = p / 4;\r\n\t\t\t\t} else s = p / (2 * Math.PI) * Math.asin(1 / a);\r\n\t\t\t\tif (t < 1) return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));\r\n\t\t\t\treturn a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) * 0.5 + 1;\r\n\t\t\t},\r\n\t\t\teaseInBack: function (t) {\r\n\t\t\t\tvar s = 1.70158;\r\n\t\t\t\treturn 1 * (t /= 1) * t * ((s + 1) * t - s);\r\n\t\t\t},\r\n\t\t\teaseOutBack: function (t) {\r\n\t\t\t\tvar s = 1.70158;\r\n\t\t\t\treturn 1 * ((t = t / 1 - 1) * t * ((s + 1) * t + s) + 1);\r\n\t\t\t},\r\n\t\t\teaseInOutBack: function (t) {\r\n\t\t\t\tvar s = 1.70158;\r\n\t\t\t\tif ((t /= 1 / 2) < 1) return 1 / 2 * (t * t * (((s *= (1.525)) + 1) * t - s));\r\n\t\t\t\treturn 1 / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);\r\n\t\t\t},\r\n\t\t\teaseInBounce: function (t) {\r\n\t\t\t\treturn 1 - easingEffects.easeOutBounce(1 - t);\r\n\t\t\t},\r\n\t\t\teaseOutBounce: function (t) {\r\n\t\t\t\tif ((t /= 1) < (1 / 2.75)) {\r\n\t\t\t\t\treturn 1 * (7.5625 * t * t);\r\n\t\t\t\t} else if (t < (2 / 2.75)) {\r\n\t\t\t\t\treturn 1 * (7.5625 * (t -= (1.5 / 2.75)) * t + 0.75);\r\n\t\t\t\t} else if (t < (2.5 / 2.75)) {\r\n\t\t\t\t\treturn 1 * (7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375);\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn 1 * (7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\teaseInOutBounce: function (t) {\r\n\t\t\t\tif (t < 1 / 2) return easingEffects.easeInBounce(t * 2) * 0.5;\r\n\t\t\t\treturn easingEffects.easeOutBounce(t * 2 - 1) * 0.5 + 1 * 0.5;\r\n\t\t\t}\r\n\t\t},\r\n\t\t//Request animation polyfill - http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/\r\n\t\trequestAnimFrame = helpers.requestAnimFrame = (function(){\r\n\t\t\treturn window.requestAnimationFrame ||\r\n\t\t\t\twindow.webkitRequestAnimationFrame ||\r\n\t\t\t\twindow.mozRequestAnimationFrame ||\r\n\t\t\t\twindow.oRequestAnimationFrame ||\r\n\t\t\t\twindow.msRequestAnimationFrame ||\r\n\t\t\t\tfunction(callback) {\r\n\t\t\t\t\treturn window.setTimeout(callback, 1000 / 60);\r\n\t\t\t\t};\r\n\t\t})(),\r\n\t\tcancelAnimFrame = helpers.cancelAnimFrame = (function(){\r\n\t\t\treturn window.cancelAnimationFrame ||\r\n\t\t\t\twindow.webkitCancelAnimationFrame ||\r\n\t\t\t\twindow.mozCancelAnimationFrame ||\r\n\t\t\t\twindow.oCancelAnimationFrame ||\r\n\t\t\t\twindow.msCancelAnimationFrame ||\r\n\t\t\t\tfunction(callback) {\r\n\t\t\t\t\treturn window.clearTimeout(callback, 1000 / 60);\r\n\t\t\t\t};\r\n\t\t})(),\r\n\t\tanimationLoop = helpers.animationLoop = function(callback,totalSteps,easingString,onProgress,onComplete,chartInstance){\r\n\r\n\t\t\tvar currentStep = 0,\r\n\t\t\t\teasingFunction = easingEffects[easingString] || easingEffects.linear;\r\n\r\n\t\t\tvar animationFrame = function(){\r\n\t\t\t\tcurrentStep++;\r\n\t\t\t\tvar stepDecimal = currentStep/totalSteps;\r\n\t\t\t\tvar easeDecimal = easingFunction(stepDecimal);\r\n\r\n\t\t\t\tcallback.call(chartInstance,easeDecimal,stepDecimal, currentStep);\r\n\t\t\t\tonProgress.call(chartInstance,easeDecimal,stepDecimal);\r\n\t\t\t\tif (currentStep < totalSteps){\r\n\t\t\t\t\tchartInstance.animationFrame = requestAnimFrame(animationFrame);\r\n\t\t\t\t} else{\r\n\t\t\t\t\tonComplete.apply(chartInstance);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\trequestAnimFrame(animationFrame);\r\n\t\t},\r\n\t\t//-- DOM methods\r\n\t\tgetRelativePosition = helpers.getRelativePosition = function(evt){\r\n\t\t\tvar mouseX, mouseY;\r\n\t\t\tvar e = evt.originalEvent || evt,\r\n\t\t\t\tcanvas = evt.currentTarget || evt.srcElement,\r\n\t\t\t\tboundingRect = canvas.getBoundingClientRect();\r\n\r\n\t\t\tif (e.touches){\r\n\t\t\t\tmouseX = e.touches[0].clientX - boundingRect.left;\r\n\t\t\t\tmouseY = e.touches[0].clientY - boundingRect.top;\r\n\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tmouseX = e.clientX - boundingRect.left;\r\n\t\t\t\tmouseY = e.clientY - boundingRect.top;\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tx : mouseX,\r\n\t\t\t\ty : mouseY\r\n\t\t\t};\r\n\r\n\t\t},\r\n\t\taddEvent = helpers.addEvent = function(node,eventType,method){\r\n\t\t\tif (node.addEventListener){\r\n\t\t\t\tnode.addEventListener(eventType,method);\r\n\t\t\t} else if (node.attachEvent){\r\n\t\t\t\tnode.attachEvent(\"on\"+eventType, method);\r\n\t\t\t} else {\r\n\t\t\t\tnode[\"on\"+eventType] = method;\r\n\t\t\t}\r\n\t\t},\r\n\t\tremoveEvent = helpers.removeEvent = function(node, eventType, handler){\r\n\t\t\tif (node.removeEventListener){\r\n\t\t\t\tnode.removeEventListener(eventType, handler, false);\r\n\t\t\t} else if (node.detachEvent){\r\n\t\t\t\tnode.detachEvent(\"on\"+eventType,handler);\r\n\t\t\t} else{\r\n\t\t\t\tnode[\"on\" + eventType] = noop;\r\n\t\t\t}\r\n\t\t},\r\n\t\tbindEvents = helpers.bindEvents = function(chartInstance, arrayOfEvents, handler){\r\n\t\t\t// Create the events object if it's not already present\r\n\t\t\tif (!chartInstance.events) chartInstance.events = {};\r\n\r\n\t\t\teach(arrayOfEvents,function(eventName){\r\n\t\t\t\tchartInstance.events[eventName] = function(){\r\n\t\t\t\t\thandler.apply(chartInstance, arguments);\r\n\t\t\t\t};\r\n\t\t\t\taddEvent(chartInstance.chart.canvas,eventName,chartInstance.events[eventName]);\r\n\t\t\t});\r\n\t\t},\r\n\t\tunbindEvents = helpers.unbindEvents = function (chartInstance, arrayOfEvents) {\r\n\t\t\teach(arrayOfEvents, function(handler,eventName){\r\n\t\t\t\tremoveEvent(chartInstance.chart.canvas, eventName, handler);\r\n\t\t\t});\r\n\t\t},\r\n\t\tgetMaximumWidth = helpers.getMaximumWidth = function(domNode){\r\n\t\t\tvar container = domNode.parentNode;\r\n\t\t\t// TODO = check cross browser stuff with this.\r\n\t\t\treturn container.clientWidth;\r\n\t\t},\r\n\t\tgetMaximumHeight = helpers.getMaximumHeight = function(domNode){\r\n\t\t\tvar container = domNode.parentNode;\r\n\t\t\t// TODO = check cross browser stuff with this.\r\n\t\t\treturn container.clientHeight;\r\n\t\t},\r\n\t\tgetMaximumSize = helpers.getMaximumSize = helpers.getMaximumWidth, // legacy support\r\n\t\tretinaScale = helpers.retinaScale = function(chart){\r\n\t\t\tvar ctx = chart.ctx,\r\n\t\t\t\twidth = chart.canvas.width,\r\n\t\t\t\theight = chart.canvas.height;\r\n\r\n\t\t\tif (window.devicePixelRatio) {\r\n\t\t\t\tctx.canvas.style.width = width + \"px\";\r\n\t\t\t\tctx.canvas.style.height = height + \"px\";\r\n\t\t\t\tctx.canvas.height = height * window.devicePixelRatio;\r\n\t\t\t\tctx.canvas.width = width * window.devicePixelRatio;\r\n\t\t\t\tctx.scale(window.devicePixelRatio, window.devicePixelRatio);\r\n\t\t\t}\r\n\t\t},\r\n\t\t//-- Canvas methods\r\n\t\tclear = helpers.clear = function(chart){\r\n\t\t\tchart.ctx.clearRect(0,0,chart.width,chart.height);\r\n\t\t},\r\n\t\tfontString = helpers.fontString = function(pixelSize,fontStyle,fontFamily){\r\n\t\t\treturn fontStyle + \" \" + pixelSize+\"px \" + fontFamily;\r\n\t\t},\r\n\t\tlongestText = helpers.longestText = function(ctx,font,arrayOfStrings){\r\n\t\t\tctx.font = font;\r\n\t\t\tvar longest = 0;\r\n\t\t\teach(arrayOfStrings,function(string){\r\n\t\t\t\tvar textWidth = ctx.measureText(string).width;\r\n\t\t\t\tlongest = (textWidth > longest) ? textWidth : longest;\r\n\t\t\t});\r\n\t\t\treturn longest;\r\n\t\t},\r\n\t\tdrawRoundedRectangle = helpers.drawRoundedRectangle = function(ctx,x,y,width,height,radius){\r\n\t\t\tctx.beginPath();\r\n\t\t\tctx.moveTo(x + radius, y);\r\n\t\t\tctx.lineTo(x + width - radius, y);\r\n\t\t\tctx.quadraticCurveTo(x + width, y, x + width, y + radius);\r\n\t\t\tctx.lineTo(x + width, y + height - radius);\r\n\t\t\tctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\r\n\t\t\tctx.lineTo(x + radius, y + height);\r\n\t\t\tctx.quadraticCurveTo(x, y + height, x, y + height - radius);\r\n\t\t\tctx.lineTo(x, y + radius);\r\n\t\t\tctx.quadraticCurveTo(x, y, x + radius, y);\r\n\t\t\tctx.closePath();\r\n\t\t};\r\n\r\n\r\n\t//Store a reference to each instance - allowing us to globally resize chart instances on window resize.\r\n\t//Destroy method on the chart will remove the instance of the chart from this reference.\r\n\tChart.instances = {};\r\n\r\n\tChart.Type = function(data,options,chart){\r\n\t\tthis.options = options;\r\n\t\tthis.chart = chart;\r\n\t\tthis.id = uid();\r\n\t\t//Add the chart instance to the global namespace\r\n\t\tChart.instances[this.id] = this;\r\n\r\n\t\t// Initialize is always called when a chart type is created\r\n\t\t// By default it is a no op, but it should be extended\r\n\t\tif (options.responsive){\r\n\t\t\tthis.resize();\r\n\t\t}\r\n\t\tthis.initialize.call(this,data);\r\n\t};\r\n\r\n\t//Core methods that'll be a part of every chart type\r\n\textend(Chart.Type.prototype,{\r\n\t\tinitialize : function(){return this;},\r\n\t\tclear : function(){\r\n\t\t\tclear(this.chart);\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\tstop : function(){\r\n\t\t\t// Stops any current animation loop occuring\r\n\t\t\thelpers.cancelAnimFrame.call(root, this.animationFrame);\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\tresize : function(callback){\r\n\t\t\tthis.stop();\r\n\t\t\tvar canvas = this.chart.canvas,\r\n\t\t\t\tnewWidth = getMaximumWidth(this.chart.canvas),\r\n\t\t\t\tnewHeight = this.options.maintainAspectRatio ? newWidth / this.chart.aspectRatio : getMaximumHeight(this.chart.canvas);\r\n\r\n\t\t\tcanvas.width = this.chart.width = newWidth;\r\n\t\t\tcanvas.height =  this.chart.height = newHeight;\r\n\r\n\t\t\tretinaScale(this.chart);\r\n\r\n\t\t\tif (typeof callback === \"function\"){\r\n\t\t\t\tcallback.apply(this, Array.prototype.slice.call(arguments, 1));\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\treflow : noop,\r\n\t\trender : function(reflow){\r\n\t\t\tif (reflow){\r\n\t\t\t\tthis.reflow();\r\n\t\t\t}\r\n\t\t\tif (this.options.animation && !reflow){\r\n\t\t\t\thelpers.animationLoop(\r\n\t\t\t\t\tthis.draw,\r\n\t\t\t\t\tthis.options.animationSteps,\r\n\t\t\t\t\tthis.options.animationEasing,\r\n\t\t\t\t\tthis.options.onAnimationProgress,\r\n\t\t\t\t\tthis.options.onAnimationComplete,\r\n\t\t\t\t\tthis\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.draw();\r\n\t\t\t\tthis.options.onAnimationComplete.call(this);\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\tgenerateLegend : function(){\r\n\t\t\treturn template(this.options.legendTemplate,this);\r\n\t\t},\r\n\t\tdestroy : function(){\r\n\t\t\tthis.clear();\r\n\t\t\tunbindEvents(this, this.events);\r\n\t\t\tdelete Chart.instances[this.id];\r\n\t\t},\r\n\t\tshowTooltip : function(ChartElements, forceRedraw){\r\n\t\t\t// Only redraw the chart if we've actually changed what we're hovering on.\r\n\t\t\tif (typeof this.activeElements === 'undefined') this.activeElements = [];\r\n\r\n\t\t\tvar isChanged = (function(Elements){\r\n\t\t\t\tvar changed = false;\r\n\r\n\t\t\t\tif (Elements.length !== this.activeElements.length){\r\n\t\t\t\t\tchanged = true;\r\n\t\t\t\t\treturn changed;\r\n\t\t\t\t}\r\n\r\n\t\t\t\teach(Elements, function(element, index){\r\n\t\t\t\t\tif (element !== this.activeElements[index]){\r\n\t\t\t\t\t\tchanged = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}, this);\r\n\t\t\t\treturn changed;\r\n\t\t\t}).call(this, ChartElements);\r\n\r\n\t\t\tif (!isChanged && !forceRedraw){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.activeElements = ChartElements;\r\n\t\t\t}\r\n\t\t\tthis.draw();\r\n\t\t\tif (ChartElements.length > 0){\r\n\t\t\t\t// If we have multiple datasets, show a MultiTooltip for all of the data points at that index\r\n\t\t\t\tif (this.datasets && this.datasets.length > 1) {\r\n\t\t\t\t\tvar dataArray,\r\n\t\t\t\t\t\tdataIndex;\r\n\r\n\t\t\t\t\tfor (var i = this.datasets.length - 1; i >= 0; i--) {\r\n\t\t\t\t\t\tdataArray = this.datasets[i].points || this.datasets[i].bars || this.datasets[i].segments;\r\n\t\t\t\t\t\tdataIndex = indexOf(dataArray, ChartElements[0]);\r\n\t\t\t\t\t\tif (dataIndex !== -1){\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar tooltipLabels = [],\r\n\t\t\t\t\t\ttooltipColors = [],\r\n\t\t\t\t\t\tmedianPosition = (function(index) {\r\n\r\n\t\t\t\t\t\t\t// Get all the points at that particular index\r\n\t\t\t\t\t\t\tvar Elements = [],\r\n\t\t\t\t\t\t\t\tdataCollection,\r\n\t\t\t\t\t\t\t\txPositions = [],\r\n\t\t\t\t\t\t\t\tyPositions = [],\r\n\t\t\t\t\t\t\t\txMax,\r\n\t\t\t\t\t\t\t\tyMax,\r\n\t\t\t\t\t\t\t\txMin,\r\n\t\t\t\t\t\t\t\tyMin;\r\n\t\t\t\t\t\t\thelpers.each(this.datasets, function(dataset){\r\n\t\t\t\t\t\t\t\tdataCollection = dataset.points || dataset.bars || dataset.segments;\r\n\t\t\t\t\t\t\t\tif (dataCollection[dataIndex] && dataCollection[dataIndex].hasValue()){\r\n\t\t\t\t\t\t\t\t\tElements.push(dataCollection[dataIndex]);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\thelpers.each(Elements, function(element) {\r\n\t\t\t\t\t\t\t\txPositions.push(element.x);\r\n\t\t\t\t\t\t\t\tyPositions.push(element.y);\r\n\r\n\r\n\t\t\t\t\t\t\t\t//Include any colour information about the element\r\n\t\t\t\t\t\t\t\ttooltipLabels.push(helpers.template(this.options.multiTooltipTemplate, element));\r\n\t\t\t\t\t\t\t\ttooltipColors.push({\r\n\t\t\t\t\t\t\t\t\tfill: element._saved.fillColor || element.fillColor,\r\n\t\t\t\t\t\t\t\t\tstroke: element._saved.strokeColor || element.strokeColor\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t}, this);\r\n\r\n\t\t\t\t\t\t\tyMin = min(yPositions);\r\n\t\t\t\t\t\t\tyMax = max(yPositions);\r\n\r\n\t\t\t\t\t\t\txMin = min(xPositions);\r\n\t\t\t\t\t\t\txMax = max(xPositions);\r\n\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\tx: (xMin > this.chart.width/2) ? xMin : xMax,\r\n\t\t\t\t\t\t\t\ty: (yMin + yMax)/2\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}).call(this, dataIndex);\r\n\r\n\t\t\t\t\tnew Chart.MultiTooltip({\r\n\t\t\t\t\t\tx: medianPosition.x,\r\n\t\t\t\t\t\ty: medianPosition.y,\r\n\t\t\t\t\t\txPadding: this.options.tooltipXPadding,\r\n\t\t\t\t\t\tyPadding: this.options.tooltipYPadding,\r\n\t\t\t\t\t\txOffset: this.options.tooltipXOffset,\r\n\t\t\t\t\t\tfillColor: this.options.tooltipFillColor,\r\n\t\t\t\t\t\ttextColor: this.options.tooltipFontColor,\r\n\t\t\t\t\t\tfontFamily: this.options.tooltipFontFamily,\r\n\t\t\t\t\t\tfontStyle: this.options.tooltipFontStyle,\r\n\t\t\t\t\t\tfontSize: this.options.tooltipFontSize,\r\n\t\t\t\t\t\ttitleTextColor: this.options.tooltipTitleFontColor,\r\n\t\t\t\t\t\ttitleFontFamily: this.options.tooltipTitleFontFamily,\r\n\t\t\t\t\t\ttitleFontStyle: this.options.tooltipTitleFontStyle,\r\n\t\t\t\t\t\ttitleFontSize: this.options.tooltipTitleFontSize,\r\n\t\t\t\t\t\tcornerRadius: this.options.tooltipCornerRadius,\r\n\t\t\t\t\t\tlabels: tooltipLabels,\r\n\t\t\t\t\t\tlegendColors: tooltipColors,\r\n\t\t\t\t\t\tlegendColorBackground : this.options.multiTooltipKeyBackground,\r\n\t\t\t\t\t\ttitle: ChartElements[0].label,\r\n\t\t\t\t\t\tchart: this.chart,\r\n\t\t\t\t\t\tctx: this.chart.ctx\r\n\t\t\t\t\t}).draw();\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\teach(ChartElements, function(Element) {\r\n\t\t\t\t\t\tvar tooltipPosition = Element.tooltipPosition();\r\n\t\t\t\t\t\tnew Chart.Tooltip({\r\n\t\t\t\t\t\t\tx: Math.round(tooltipPosition.x),\r\n\t\t\t\t\t\t\ty: Math.round(tooltipPosition.y),\r\n\t\t\t\t\t\t\txPadding: this.options.tooltipXPadding,\r\n\t\t\t\t\t\t\tyPadding: this.options.tooltipYPadding,\r\n\t\t\t\t\t\t\tfillColor: this.options.tooltipFillColor,\r\n\t\t\t\t\t\t\ttextColor: this.options.tooltipFontColor,\r\n\t\t\t\t\t\t\tfontFamily: this.options.tooltipFontFamily,\r\n\t\t\t\t\t\t\tfontStyle: this.options.tooltipFontStyle,\r\n\t\t\t\t\t\t\tfontSize: this.options.tooltipFontSize,\r\n\t\t\t\t\t\t\tcaretHeight: this.options.tooltipCaretSize,\r\n\t\t\t\t\t\t\tcornerRadius: this.options.tooltipCornerRadius,\r\n\t\t\t\t\t\t\ttext: template(this.options.tooltipTemplate, Element),\r\n\t\t\t\t\t\t\tchart: this.chart\r\n\t\t\t\t\t\t}).draw();\r\n\t\t\t\t\t}, this);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\ttoBase64Image : function(){\r\n\t\t\treturn this.chart.canvas.toDataURL.apply(this.chart.canvas, arguments);\r\n\t\t}\r\n\t});\r\n\r\n\tChart.Type.extend = function(extensions){\r\n\r\n\t\tvar parent = this;\r\n\r\n\t\tvar ChartType = function(){\r\n\t\t\treturn parent.apply(this,arguments);\r\n\t\t};\r\n\r\n\t\t//Copy the prototype object of the this class\r\n\t\tChartType.prototype = clone(parent.prototype);\r\n\t\t//Now overwrite some of the properties in the base class with the new extensions\r\n\t\textend(ChartType.prototype, extensions);\r\n\r\n\t\tChartType.extend = Chart.Type.extend;\r\n\r\n\t\tif (extensions.name || parent.prototype.name){\r\n\r\n\t\t\tvar chartName = extensions.name || parent.prototype.name;\r\n\t\t\t//Assign any potential default values of the new chart type\r\n\r\n\t\t\t//If none are defined, we'll use a clone of the chart type this is being extended from.\r\n\t\t\t//I.e. if we extend a line chart, we'll use the defaults from the line chart if our new chart\r\n\t\t\t//doesn't define some defaults of their own.\r\n\r\n\t\t\tvar baseDefaults = (Chart.defaults[parent.prototype.name]) ? clone(Chart.defaults[parent.prototype.name]) : {};\r\n\r\n\t\t\tChart.defaults[chartName] = extend(baseDefaults,extensions.defaults);\r\n\r\n\t\t\tChart.types[chartName] = ChartType;\r\n\r\n\t\t\t//Register this new chart type in the Chart prototype\r\n\t\t\tChart.prototype[chartName] = function(data,options){\r\n\t\t\t\tvar config = merge(Chart.defaults.global, Chart.defaults[chartName], options || {});\r\n\t\t\t\treturn new ChartType(data,config,this);\r\n\t\t\t};\r\n\t\t} else{\r\n\t\t\twarn(\"Name not provided for this chart, so it hasn't been registered\");\r\n\t\t}\r\n\t\treturn parent;\r\n\t};\r\n\r\n\tChart.Element = function(configuration){\r\n\t\textend(this,configuration);\r\n\t\tthis.initialize.apply(this,arguments);\r\n\t\tthis.save();\r\n\t};\r\n\textend(Chart.Element.prototype,{\r\n\t\tinitialize : function(){},\r\n\t\trestore : function(props){\r\n\t\t\tif (!props){\r\n\t\t\t\textend(this,this._saved);\r\n\t\t\t} else {\r\n\t\t\t\teach(props,function(key){\r\n\t\t\t\t\tthis[key] = this._saved[key];\r\n\t\t\t\t},this);\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\tsave : function(){\r\n\t\t\tthis._saved = clone(this);\r\n\t\t\tdelete this._saved._saved;\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\tupdate : function(newProps){\r\n\t\t\teach(newProps,function(value,key){\r\n\t\t\t\tthis._saved[key] = this[key];\r\n\t\t\t\tthis[key] = value;\r\n\t\t\t},this);\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\ttransition : function(props,ease){\r\n\t\t\teach(props,function(value,key){\r\n\t\t\t\tthis[key] = ((value - this._saved[key]) * ease) + this._saved[key];\r\n\t\t\t},this);\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\ttooltipPosition : function(){\r\n\t\t\treturn {\r\n\t\t\t\tx : this.x,\r\n\t\t\t\ty : this.y\r\n\t\t\t};\r\n\t\t},\r\n\t\thasValue: function(){\r\n\t\t\treturn isNumber(this.value);\r\n\t\t}\r\n\t});\r\n\r\n\tChart.Element.extend = inherits;\r\n\r\n\r\n\tChart.Point = Chart.Element.extend({\r\n\t\tdisplay: true,\r\n\t\tinRange: function(chartX,chartY){\r\n\t\t\tvar hitDetectionRange = this.hitDetectionRadius + this.radius;\r\n\t\t\treturn ((Math.pow(chartX-this.x, 2)+Math.pow(chartY-this.y, 2)) < Math.pow(hitDetectionRange,2));\r\n\t\t},\r\n\t\tdraw : function(){\r\n\t\t\tif (this.display){\r\n\t\t\t\tvar ctx = this.ctx;\r\n\t\t\t\tctx.beginPath();\r\n\r\n\t\t\t\tctx.arc(this.x, this.y, this.radius, 0, Math.PI*2);\r\n\t\t\t\tctx.closePath();\r\n\r\n\t\t\t\tctx.strokeStyle = this.strokeColor;\r\n\t\t\t\tctx.lineWidth = this.strokeWidth;\r\n\r\n\t\t\t\tctx.fillStyle = this.fillColor;\r\n\r\n\t\t\t\tctx.fill();\r\n\t\t\t\tctx.stroke();\r\n\t\t\t}\r\n\r\n\r\n\t\t\t//Quick debug for bezier curve splining\r\n\t\t\t//Highlights control points and the line between them.\r\n\t\t\t//Handy for dev - stripped in the min version.\r\n\r\n\t\t\t// ctx.save();\r\n\t\t\t// ctx.fillStyle = \"black\";\r\n\t\t\t// ctx.strokeStyle = \"black\"\r\n\t\t\t// ctx.beginPath();\r\n\t\t\t// ctx.arc(this.controlPoints.inner.x,this.controlPoints.inner.y, 2, 0, Math.PI*2);\r\n\t\t\t// ctx.fill();\r\n\r\n\t\t\t// ctx.beginPath();\r\n\t\t\t// ctx.arc(this.controlPoints.outer.x,this.controlPoints.outer.y, 2, 0, Math.PI*2);\r\n\t\t\t// ctx.fill();\r\n\r\n\t\t\t// ctx.moveTo(this.controlPoints.inner.x,this.controlPoints.inner.y);\r\n\t\t\t// ctx.lineTo(this.x, this.y);\r\n\t\t\t// ctx.lineTo(this.controlPoints.outer.x,this.controlPoints.outer.y);\r\n\t\t\t// ctx.stroke();\r\n\r\n\t\t\t// ctx.restore();\r\n\r\n\r\n\r\n\t\t}\r\n\t});\r\n\r\n\tChart.Arc = Chart.Element.extend({\r\n\t\tinRange : function(chartX,chartY){\r\n\r\n\t\t\tvar pointRelativePosition = helpers.getAngleFromPoint(this, {\r\n\t\t\t\tx: chartX,\r\n\t\t\t\ty: chartY\r\n\t\t\t});\r\n\r\n\t\t\t//Check if within the range of the open/close angle\r\n\t\t\tvar betweenAngles = (pointRelativePosition.angle >= this.startAngle && pointRelativePosition.angle <= this.endAngle),\r\n\t\t\t\twithinRadius = (pointRelativePosition.distance >= this.innerRadius && pointRelativePosition.distance <= this.outerRadius);\r\n\r\n\t\t\treturn (betweenAngles && withinRadius);\r\n\t\t\t//Ensure within the outside of the arc centre, but inside arc outer\r\n\t\t},\r\n\t\ttooltipPosition : function(){\r\n\t\t\tvar centreAngle = this.startAngle + ((this.endAngle - this.startAngle) / 2),\r\n\t\t\t\trangeFromCentre = (this.outerRadius - this.innerRadius) / 2 + this.innerRadius;\r\n\t\t\treturn {\r\n\t\t\t\tx : this.x + (Math.cos(centreAngle) * rangeFromCentre),\r\n\t\t\t\ty : this.y + (Math.sin(centreAngle) * rangeFromCentre)\r\n\t\t\t};\r\n\t\t},\r\n\t\tdraw : function(animationPercent){\r\n\r\n\t\t\tvar easingDecimal = animationPercent || 1;\r\n\r\n\t\t\tvar ctx = this.ctx;\r\n\r\n\t\t\tctx.beginPath();\r\n\r\n\t\t\tctx.arc(this.x, this.y, this.outerRadius, this.startAngle, this.endAngle);\r\n\r\n\t\t\tctx.arc(this.x, this.y, this.innerRadius, this.endAngle, this.startAngle, true);\r\n\r\n\t\t\tctx.closePath();\r\n\t\t\tctx.strokeStyle = this.strokeColor;\r\n\t\t\tctx.lineWidth = this.strokeWidth;\r\n\r\n\t\t\tctx.fillStyle = this.fillColor;\r\n\r\n\t\t\tctx.fill();\r\n\t\t\tctx.lineJoin = 'bevel';\r\n\r\n\t\t\tif (this.showStroke){\r\n\t\t\t\tctx.stroke();\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\tChart.Rectangle = Chart.Element.extend({\r\n\t\tdraw : function(){\r\n\t\t\tvar ctx = this.ctx,\r\n\t\t\t\thalfWidth = this.width/2,\r\n\t\t\t\tleftX = this.x - halfWidth,\r\n\t\t\t\trightX = this.x + halfWidth,\r\n\t\t\t\ttop = this.base - (this.base - this.y),\r\n\t\t\t\thalfStroke = this.strokeWidth / 2;\r\n\r\n\t\t\t// Canvas doesn't allow us to stroke inside the width so we can\r\n\t\t\t// adjust the sizes to fit if we're setting a stroke on the line\r\n\t\t\tif (this.showStroke){\r\n\t\t\t\tleftX += halfStroke;\r\n\t\t\t\trightX -= halfStroke;\r\n\t\t\t\ttop += halfStroke;\r\n\t\t\t}\r\n\r\n\t\t\tctx.beginPath();\r\n\r\n\t\t\tctx.fillStyle = this.fillColor;\r\n\t\t\tctx.strokeStyle = this.strokeColor;\r\n\t\t\tctx.lineWidth = this.strokeWidth;\r\n\r\n\t\t\t// It'd be nice to keep this class totally generic to any rectangle\r\n\t\t\t// and simply specify which border to miss out.\r\n\t\t\tctx.moveTo(leftX, this.base);\r\n\t\t\tctx.lineTo(leftX, top);\r\n\t\t\tctx.lineTo(rightX, top);\r\n\t\t\tctx.lineTo(rightX, this.base);\r\n\t\t\tctx.fill();\r\n\t\t\tif (this.showStroke){\r\n\t\t\t\tctx.stroke();\r\n\t\t\t}\r\n\t\t},\r\n\t\theight : function(){\r\n\t\t\treturn this.base - this.y;\r\n\t\t},\r\n\t\tinRange : function(chartX,chartY){\r\n\t\t\treturn (chartX >= this.x - this.width/2 && chartX <= this.x + this.width/2) && (chartY >= this.y && chartY <= this.base);\r\n\t\t}\r\n\t});\r\n\r\n\tChart.Tooltip = Chart.Element.extend({\r\n\t\tdraw : function(){\r\n\r\n\t\t\tvar ctx = this.chart.ctx;\r\n\r\n\t\t\tctx.font = fontString(this.fontSize,this.fontStyle,this.fontFamily);\r\n\r\n\t\t\tthis.xAlign = \"center\";\r\n\t\t\tthis.yAlign = \"above\";\r\n\r\n\t\t\t//Distance between the actual element.y position and the start of the tooltip caret\r\n\t\t\tvar caretPadding = 2;\r\n\r\n\t\t\tvar tooltipWidth = ctx.measureText(this.text).width + 2*this.xPadding,\r\n\t\t\t\ttooltipRectHeight = this.fontSize + 2*this.yPadding,\r\n\t\t\t\ttooltipHeight = tooltipRectHeight + this.caretHeight + caretPadding;\r\n\r\n\t\t\tif (this.x + tooltipWidth/2 >this.chart.width){\r\n\t\t\t\tthis.xAlign = \"left\";\r\n\t\t\t} else if (this.x - tooltipWidth/2 < 0){\r\n\t\t\t\tthis.xAlign = \"right\";\r\n\t\t\t}\r\n\r\n\t\t\tif (this.y - tooltipHeight < 0){\r\n\t\t\t\tthis.yAlign = \"below\";\r\n\t\t\t}\r\n\r\n\r\n\t\t\tvar tooltipX = this.x - tooltipWidth/2,\r\n\t\t\t\ttooltipY = this.y - tooltipHeight;\r\n\r\n\t\t\tctx.fillStyle = this.fillColor;\r\n\r\n\t\t\tswitch(this.yAlign)\r\n\t\t\t{\r\n\t\t\tcase \"above\":\r\n\t\t\t\t//Draw a caret above the x/y\r\n\t\t\t\tctx.beginPath();\r\n\t\t\t\tctx.moveTo(this.x,this.y - caretPadding);\r\n\t\t\t\tctx.lineTo(this.x + this.caretHeight, this.y - (caretPadding + this.caretHeight));\r\n\t\t\t\tctx.lineTo(this.x - this.caretHeight, this.y - (caretPadding + this.caretHeight));\r\n\t\t\t\tctx.closePath();\r\n\t\t\t\tctx.fill();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"below\":\r\n\t\t\t\ttooltipY = this.y + caretPadding + this.caretHeight;\r\n\t\t\t\t//Draw a caret below the x/y\r\n\t\t\t\tctx.beginPath();\r\n\t\t\t\tctx.moveTo(this.x, this.y + caretPadding);\r\n\t\t\t\tctx.lineTo(this.x + this.caretHeight, this.y + caretPadding + this.caretHeight);\r\n\t\t\t\tctx.lineTo(this.x - this.caretHeight, this.y + caretPadding + this.caretHeight);\r\n\t\t\t\tctx.closePath();\r\n\t\t\t\tctx.fill();\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tswitch(this.xAlign)\r\n\t\t\t{\r\n\t\t\tcase \"left\":\r\n\t\t\t\ttooltipX = this.x - tooltipWidth + (this.cornerRadius + this.caretHeight);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"right\":\r\n\t\t\t\ttooltipX = this.x - (this.cornerRadius + this.caretHeight);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tdrawRoundedRectangle(ctx,tooltipX,tooltipY,tooltipWidth,tooltipRectHeight,this.cornerRadius);\r\n\r\n\t\t\tctx.fill();\r\n\r\n\t\t\tctx.fillStyle = this.textColor;\r\n\t\t\tctx.textAlign = \"center\";\r\n\t\t\tctx.textBaseline = \"middle\";\r\n\t\t\tctx.fillText(this.text, tooltipX + tooltipWidth/2, tooltipY + tooltipRectHeight/2);\r\n\t\t}\r\n\t});\r\n\r\n\tChart.MultiTooltip = Chart.Element.extend({\r\n\t\tinitialize : function(){\r\n\t\t\tthis.font = fontString(this.fontSize,this.fontStyle,this.fontFamily);\r\n\r\n\t\t\tthis.titleFont = fontString(this.titleFontSize,this.titleFontStyle,this.titleFontFamily);\r\n\r\n\t\t\tthis.height = (this.labels.length * this.fontSize) + ((this.labels.length-1) * (this.fontSize/2)) + (this.yPadding*2) + this.titleFontSize *1.5;\r\n\r\n\t\t\tthis.ctx.font = this.titleFont;\r\n\r\n\t\t\tvar titleWidth = this.ctx.measureText(this.title).width,\r\n\t\t\t\t//Label has a legend square as well so account for this.\r\n\t\t\t\tlabelWidth = longestText(this.ctx,this.font,this.labels) + this.fontSize + 3,\r\n\t\t\t\tlongestTextWidth = max([labelWidth,titleWidth]);\r\n\r\n\t\t\tthis.width = longestTextWidth + (this.xPadding*2);\r\n\r\n\r\n\t\t\tvar halfHeight = this.height/2;\r\n\r\n\t\t\t//Check to ensure the height will fit on the canvas\r\n\t\t\t//The three is to buffer form the very\r\n\t\t\tif (this.y - halfHeight < 0 ){\r\n\t\t\t\tthis.y = halfHeight;\r\n\t\t\t} else if (this.y + halfHeight > this.chart.height){\r\n\t\t\t\tthis.y = this.chart.height - halfHeight;\r\n\t\t\t}\r\n\r\n\t\t\t//Decide whether to align left or right based on position on canvas\r\n\t\t\tif (this.x > this.chart.width/2){\r\n\t\t\t\tthis.x -= this.xOffset + this.width;\r\n\t\t\t} else {\r\n\t\t\t\tthis.x += this.xOffset;\r\n\t\t\t}\r\n\r\n\r\n\t\t},\r\n\t\tgetLineHeight : function(index){\r\n\t\t\tvar baseLineHeight = this.y - (this.height/2) + this.yPadding,\r\n\t\t\t\tafterTitleIndex = index-1;\r\n\r\n\t\t\t//If the index is zero, we're getting the title\r\n\t\t\tif (index === 0){\r\n\t\t\t\treturn baseLineHeight + this.titleFontSize/2;\r\n\t\t\t} else{\r\n\t\t\t\treturn baseLineHeight + ((this.fontSize*1.5*afterTitleIndex) + this.fontSize/2) + this.titleFontSize * 1.5;\r\n\t\t\t}\r\n\r\n\t\t},\r\n\t\tdraw : function(){\r\n\t\t\tdrawRoundedRectangle(this.ctx,this.x,this.y - this.height/2,this.width,this.height,this.cornerRadius);\r\n\t\t\tvar ctx = this.ctx;\r\n\t\t\tctx.fillStyle = this.fillColor;\r\n\t\t\tctx.fill();\r\n\t\t\tctx.closePath();\r\n\r\n\t\t\tctx.textAlign = \"left\";\r\n\t\t\tctx.textBaseline = \"middle\";\r\n\t\t\tctx.fillStyle = this.titleTextColor;\r\n\t\t\tctx.font = this.titleFont;\r\n\r\n\t\t\tctx.fillText(this.title,this.x + this.xPadding, this.getLineHeight(0));\r\n\r\n\t\t\tctx.font = this.font;\r\n\t\t\thelpers.each(this.labels,function(label,index){\r\n\t\t\t\tctx.fillStyle = this.textColor;\r\n\t\t\t\tctx.fillText(label,this.x + this.xPadding + this.fontSize + 3, this.getLineHeight(index + 1));\r\n\r\n\t\t\t\t//A bit gnarly, but clearing this rectangle breaks when using explorercanvas (clears whole canvas)\r\n\t\t\t\t//ctx.clearRect(this.x + this.xPadding, this.getLineHeight(index + 1) - this.fontSize/2, this.fontSize, this.fontSize);\r\n\t\t\t\t//Instead we'll make a white filled block to put the legendColour palette over.\r\n\r\n\t\t\t\tctx.fillStyle = this.legendColorBackground;\r\n\t\t\t\tctx.fillRect(this.x + this.xPadding, this.getLineHeight(index + 1) - this.fontSize/2, this.fontSize, this.fontSize);\r\n\r\n\t\t\t\tctx.fillStyle = this.legendColors[index].fill;\r\n\t\t\t\tctx.fillRect(this.x + this.xPadding, this.getLineHeight(index + 1) - this.fontSize/2, this.fontSize, this.fontSize);\r\n\r\n\r\n\t\t\t},this);\r\n\t\t}\r\n\t});\r\n\r\n\tChart.Scale = Chart.Element.extend({\r\n\t\tinitialize : function(){\r\n\t\t\tthis.fit();\r\n\t\t},\r\n\t\tbuildYLabels : function(){\r\n\t\t\tthis.yLabels = [];\r\n\r\n\t\t\tvar stepDecimalPlaces = getDecimalPlaces(this.stepValue);\r\n\r\n\t\t\tfor (var i=0; i<=this.steps; i++){\r\n\t\t\t\tthis.yLabels.push(template(this.templateString,{value:(this.min + (i * this.stepValue)).toFixed(stepDecimalPlaces)}));\r\n\t\t\t}\r\n\t\t\tthis.yLabelWidth = (this.display && this.showLabels) ? longestText(this.ctx,this.font,this.yLabels) : 0;\r\n\t\t},\r\n\t\taddXLabel : function(label){\r\n\t\t\tthis.xLabels.push(label);\r\n\t\t\tthis.valuesCount++;\r\n\t\t\tthis.fit();\r\n\t\t},\r\n\t\tremoveXLabel : function(){\r\n\t\t\tthis.xLabels.shift();\r\n\t\t\tthis.valuesCount--;\r\n\t\t\tthis.fit();\r\n\t\t},\r\n\t\t// Fitting loop to rotate x Labels and figure out what fits there, and also calculate how many Y steps to use\r\n\t\tfit: function(){\r\n\t\t\t// First we need the width of the yLabels, assuming the xLabels aren't rotated\r\n\r\n\t\t\t// To do that we need the base line at the top and base of the chart, assuming there is no x label rotation\r\n\t\t\tthis.startPoint = (this.display) ? this.fontSize : 0;\r\n\t\t\tthis.endPoint = (this.display) ? this.height - (this.fontSize * 1.5) - 5 : this.height; // -5 to pad labels\r\n\r\n\t\t\t// Apply padding settings to the start and end point.\r\n\t\t\tthis.startPoint += this.padding;\r\n\t\t\tthis.endPoint -= this.padding;\r\n\r\n\t\t\t// Cache the starting height, so can determine if we need to recalculate the scale yAxis\r\n\t\t\tvar cachedHeight = this.endPoint - this.startPoint,\r\n\t\t\t\tcachedYLabelWidth;\r\n\r\n\t\t\t// Build the current yLabels so we have an idea of what size they'll be to start\r\n\t\t\t/*\r\n\t\t\t *\tThis sets what is returned from calculateScaleRange as static properties of this class:\r\n\t\t\t *\r\n\t\t\t\tthis.steps;\r\n\t\t\t\tthis.stepValue;\r\n\t\t\t\tthis.min;\r\n\t\t\t\tthis.max;\r\n\t\t\t *\r\n\t\t\t */\r\n\t\t\tthis.calculateYRange(cachedHeight);\r\n\r\n\t\t\t// With these properties set we can now build the array of yLabels\r\n\t\t\t// and also the width of the largest yLabel\r\n\t\t\tthis.buildYLabels();\r\n\r\n\t\t\tthis.calculateXLabelRotation();\r\n\r\n\t\t\twhile((cachedHeight > this.endPoint - this.startPoint)){\r\n\t\t\t\tcachedHeight = this.endPoint - this.startPoint;\r\n\t\t\t\tcachedYLabelWidth = this.yLabelWidth;\r\n\r\n\t\t\t\tthis.calculateYRange(cachedHeight);\r\n\t\t\t\tthis.buildYLabels();\r\n\r\n\t\t\t\t// Only go through the xLabel loop again if the yLabel width has changed\r\n\t\t\t\tif (cachedYLabelWidth < this.yLabelWidth){\r\n\t\t\t\t\tthis.calculateXLabelRotation();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t},\r\n\t\tcalculateXLabelRotation : function(){\r\n\t\t\t//Get the width of each grid by calculating the difference\r\n\t\t\t//between x offsets between 0 and 1.\r\n\r\n\t\t\tthis.ctx.font = this.font;\r\n\r\n\t\t\tvar firstWidth = this.ctx.measureText(this.xLabels[0]).width,\r\n\t\t\t\tlastWidth = this.ctx.measureText(this.xLabels[this.xLabels.length - 1]).width,\r\n\t\t\t\tfirstRotated,\r\n\t\t\t\tlastRotated;\r\n\r\n\r\n\t\t\tthis.xScalePaddingRight = lastWidth/2 + 3;\r\n\t\t\tthis.xScalePaddingLeft = (firstWidth/2 > this.yLabelWidth + 10) ? firstWidth/2 : this.yLabelWidth + 10;\r\n\r\n\t\t\tthis.xLabelRotation = 0;\r\n\t\t\tif (this.display){\r\n\t\t\t\tvar originalLabelWidth = longestText(this.ctx,this.font,this.xLabels),\r\n\t\t\t\t\tcosRotation,\r\n\t\t\t\t\tfirstRotatedWidth;\r\n\t\t\t\tthis.xLabelWidth = originalLabelWidth;\r\n\t\t\t\t//Allow 3 pixels x2 padding either side for label readability\r\n\t\t\t\tvar xGridWidth = Math.floor(this.calculateX(1) - this.calculateX(0)) - 6;\r\n\r\n\t\t\t\t//Max label rotate should be 90 - also act as a loop counter\r\n\t\t\t\twhile ((this.xLabelWidth > xGridWidth && this.xLabelRotation === 0) || (this.xLabelWidth > xGridWidth && this.xLabelRotation <= 90 && this.xLabelRotation > 0)){\r\n\t\t\t\t\tcosRotation = Math.cos(toRadians(this.xLabelRotation));\r\n\r\n\t\t\t\t\tfirstRotated = cosRotation * firstWidth;\r\n\t\t\t\t\tlastRotated = cosRotation * lastWidth;\r\n\r\n\t\t\t\t\t// We're right aligning the text now.\r\n\t\t\t\t\tif (firstRotated + this.fontSize / 2 > this.yLabelWidth + 8){\r\n\t\t\t\t\t\tthis.xScalePaddingLeft = firstRotated + this.fontSize / 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.xScalePaddingRight = this.fontSize/2;\r\n\r\n\r\n\t\t\t\t\tthis.xLabelRotation++;\r\n\t\t\t\t\tthis.xLabelWidth = cosRotation * originalLabelWidth;\r\n\r\n\t\t\t\t}\r\n\t\t\t\tif (this.xLabelRotation > 0){\r\n\t\t\t\t\tthis.endPoint -= Math.sin(toRadians(this.xLabelRotation))*originalLabelWidth + 3;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.xLabelWidth = 0;\r\n\t\t\t\tthis.xScalePaddingRight = this.padding;\r\n\t\t\t\tthis.xScalePaddingLeft = this.padding;\r\n\t\t\t}\r\n\r\n\t\t},\r\n\t\t// Needs to be overidden in each Chart type\r\n\t\t// Otherwise we need to pass all the data into the scale class\r\n\t\tcalculateYRange: noop,\r\n\t\tdrawingArea: function(){\r\n\t\t\treturn this.startPoint - this.endPoint;\r\n\t\t},\r\n\t\tcalculateY : function(value){\r\n\t\t\tvar scalingFactor = this.drawingArea() / (this.min - this.max);\r\n\t\t\treturn this.endPoint - (scalingFactor * (value - this.min));\r\n\t\t},\r\n\t\tcalculateX : function(index){\r\n\t\t\tvar isRotated = (this.xLabelRotation > 0),\r\n\t\t\t\t// innerWidth = (this.offsetGridLines) ? this.width - offsetLeft - this.padding : this.width - (offsetLeft + halfLabelWidth * 2) - this.padding,\r\n\t\t\t\tinnerWidth = this.width - (this.xScalePaddingLeft + this.xScalePaddingRight),\r\n\t\t\t\tvalueWidth = innerWidth/(this.valuesCount - ((this.offsetGridLines) ? 0 : 1)),\r\n\t\t\t\tvalueOffset = (valueWidth * index) + this.xScalePaddingLeft;\r\n\r\n\t\t\tif (this.offsetGridLines){\r\n\t\t\t\tvalueOffset += (valueWidth/2);\r\n\t\t\t}\r\n\r\n\t\t\treturn Math.round(valueOffset);\r\n\t\t},\r\n\t\tupdate : function(newProps){\r\n\t\t\thelpers.extend(this, newProps);\r\n\t\t\tthis.fit();\r\n\t\t},\r\n\t\tdraw : function(){\r\n\t\t\tvar ctx = this.ctx,\r\n\t\t\t\tyLabelGap = (this.endPoint - this.startPoint) / this.steps,\r\n\t\t\t\txStart = Math.round(this.xScalePaddingLeft);\r\n\t\t\tif (this.display){\r\n\t\t\t\tctx.fillStyle = this.textColor;\r\n\t\t\t\tctx.font = this.font;\r\n\t\t\t\teach(this.yLabels,function(labelString,index){\r\n\t\t\t\t\tvar yLabelCenter = this.endPoint - (yLabelGap * index),\r\n\t\t\t\t\t\tlinePositionY = Math.round(yLabelCenter);\r\n\r\n\t\t\t\t\tctx.textAlign = \"right\";\r\n\t\t\t\t\tctx.textBaseline = \"middle\";\r\n\t\t\t\t\tif (this.showLabels){\r\n\t\t\t\t\t\tctx.fillText(labelString,xStart - 10,yLabelCenter);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tctx.beginPath();\r\n\t\t\t\t\tif (index > 0){\r\n\t\t\t\t\t\t// This is a grid line in the centre, so drop that\r\n\t\t\t\t\t\tctx.lineWidth = this.gridLineWidth;\r\n\t\t\t\t\t\tctx.strokeStyle = this.gridLineColor;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// This is the first line on the scale\r\n\t\t\t\t\t\tctx.lineWidth = this.lineWidth;\r\n\t\t\t\t\t\tctx.strokeStyle = this.lineColor;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlinePositionY += helpers.aliasPixel(ctx.lineWidth);\r\n\r\n\t\t\t\t\tctx.moveTo(xStart, linePositionY);\r\n\t\t\t\t\tctx.lineTo(this.width, linePositionY);\r\n\t\t\t\t\tctx.stroke();\r\n\t\t\t\t\tctx.closePath();\r\n\r\n\t\t\t\t\tctx.lineWidth = this.lineWidth;\r\n\t\t\t\t\tctx.strokeStyle = this.lineColor;\r\n\t\t\t\t\tctx.beginPath();\r\n\t\t\t\t\tctx.moveTo(xStart - 5, linePositionY);\r\n\t\t\t\t\tctx.lineTo(xStart, linePositionY);\r\n\t\t\t\t\tctx.stroke();\r\n\t\t\t\t\tctx.closePath();\r\n\r\n\t\t\t\t},this);\r\n\r\n\t\t\t\teach(this.xLabels,function(label,index){\r\n\t\t\t\t\tvar xPos = this.calculateX(index) + aliasPixel(this.lineWidth),\r\n\t\t\t\t\t\t// Check to see if line/bar here and decide where to place the line\r\n\t\t\t\t\t\tlinePos = this.calculateX(index - (this.offsetGridLines ? 0.5 : 0)) + aliasPixel(this.lineWidth),\r\n\t\t\t\t\t\tisRotated = (this.xLabelRotation > 0);\r\n\r\n\t\t\t\t\tctx.beginPath();\r\n\r\n\t\t\t\t\tif (index > 0){\r\n\t\t\t\t\t\t// This is a grid line in the centre, so drop that\r\n\t\t\t\t\t\tctx.lineWidth = this.gridLineWidth;\r\n\t\t\t\t\t\tctx.strokeStyle = this.gridLineColor;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// This is the first line on the scale\r\n\t\t\t\t\t\tctx.lineWidth = this.lineWidth;\r\n\t\t\t\t\t\tctx.strokeStyle = this.lineColor;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tctx.moveTo(linePos,this.endPoint);\r\n\t\t\t\t\tctx.lineTo(linePos,this.startPoint - 3);\r\n\t\t\t\t\tctx.stroke();\r\n\t\t\t\t\tctx.closePath();\r\n\r\n\r\n\t\t\t\t\tctx.lineWidth = this.lineWidth;\r\n\t\t\t\t\tctx.strokeStyle = this.lineColor;\r\n\r\n\r\n\t\t\t\t\t// Small lines at the bottom of the base grid line\r\n\t\t\t\t\tctx.beginPath();\r\n\t\t\t\t\tctx.moveTo(linePos,this.endPoint);\r\n\t\t\t\t\tctx.lineTo(linePos,this.endPoint + 5);\r\n\t\t\t\t\tctx.stroke();\r\n\t\t\t\t\tctx.closePath();\r\n\r\n\t\t\t\t\tctx.save();\r\n\t\t\t\t\tctx.translate(xPos,(isRotated) ? this.endPoint + 12 : this.endPoint + 8);\r\n\t\t\t\t\tctx.rotate(toRadians(this.xLabelRotation)*-1);\r\n\t\t\t\t\tctx.font = this.font;\r\n\t\t\t\t\tctx.textAlign = (isRotated) ? \"right\" : \"center\";\r\n\t\t\t\t\tctx.textBaseline = (isRotated) ? \"middle\" : \"top\";\r\n\t\t\t\t\tctx.fillText(label, 0, 0);\r\n\t\t\t\t\tctx.restore();\r\n\t\t\t\t},this);\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t});\r\n\r\n\tChart.RadialScale = Chart.Element.extend({\r\n\t\tinitialize: function(){\r\n\t\t\tthis.size = min([this.height, this.width]);\r\n\t\t\tthis.drawingArea = (this.display) ? (this.size/2) - (this.fontSize/2 + this.backdropPaddingY) : (this.size/2);\r\n\t\t},\r\n\t\tcalculateCenterOffset: function(value){\r\n\t\t\t// Take into account half font size + the yPadding of the top value\r\n\t\t\tvar scalingFactor = this.drawingArea / (this.max - this.min);\r\n\r\n\t\t\treturn (value - this.min) * scalingFactor;\r\n\t\t},\r\n\t\tupdate : function(){\r\n\t\t\tif (!this.lineArc){\r\n\t\t\t\tthis.setScaleSize();\r\n\t\t\t} else {\r\n\t\t\t\tthis.drawingArea = (this.display) ? (this.size/2) - (this.fontSize/2 + this.backdropPaddingY) : (this.size/2);\r\n\t\t\t}\r\n\t\t\tthis.buildYLabels();\r\n\t\t},\r\n\t\tbuildYLabels: function(){\r\n\t\t\tthis.yLabels = [];\r\n\r\n\t\t\tvar stepDecimalPlaces = getDecimalPlaces(this.stepValue);\r\n\r\n\t\t\tfor (var i=0; i<=this.steps; i++){\r\n\t\t\t\tthis.yLabels.push(template(this.templateString,{value:(this.min + (i * this.stepValue)).toFixed(stepDecimalPlaces)}));\r\n\t\t\t}\r\n\t\t},\r\n\t\tgetCircumference : function(){\r\n\t\t\treturn ((Math.PI*2) / this.valuesCount);\r\n\t\t},\r\n\t\tsetScaleSize: function(){\r\n\t\t\t/*\r\n\t\t\t * Right, this is really confusing and there is a lot of maths going on here\r\n\t\t\t * The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\r\n\t\t\t *\r\n\t\t\t * Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\r\n\t\t\t *\r\n\t\t\t * Solution:\r\n\t\t\t *\r\n\t\t\t * We assume the radius of the polygon is half the size of the canvas at first\r\n\t\t\t * at each index we check if the text overlaps.\r\n\t\t\t *\r\n\t\t\t * Where it does, we store that angle and that index.\r\n\t\t\t *\r\n\t\t\t * After finding the largest index and angle we calculate how much we need to remove\r\n\t\t\t * from the shape radius to move the point inwards by that x.\r\n\t\t\t *\r\n\t\t\t * We average the left and right distances to get the maximum shape radius that can fit in the box\r\n\t\t\t * along with labels.\r\n\t\t\t *\r\n\t\t\t * Once we have that, we can find the centre point for the chart, by taking the x text protrusion\r\n\t\t\t * on each side, removing that from the size, halving it and adding the left x protrusion width.\r\n\t\t\t *\r\n\t\t\t * This will mean we have a shape fitted to the canvas, as large as it can be with the labels\r\n\t\t\t * and position it in the most space efficient manner\r\n\t\t\t *\r\n\t\t\t * https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\r\n\t\t\t */\r\n\r\n\r\n\t\t\t// Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\r\n\t\t\t// Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\r\n\t\t\tvar largestPossibleRadius = min([(this.height/2 - this.pointLabelFontSize - 5), this.width/2]),\r\n\t\t\t\tpointPosition,\r\n\t\t\t\ti,\r\n\t\t\t\ttextWidth,\r\n\t\t\t\thalfTextWidth,\r\n\t\t\t\tfurthestRight = this.width,\r\n\t\t\t\tfurthestRightIndex,\r\n\t\t\t\tfurthestRightAngle,\r\n\t\t\t\tfurthestLeft = 0,\r\n\t\t\t\tfurthestLeftIndex,\r\n\t\t\t\tfurthestLeftAngle,\r\n\t\t\t\txProtrusionLeft,\r\n\t\t\t\txProtrusionRight,\r\n\t\t\t\tradiusReductionRight,\r\n\t\t\t\tradiusReductionLeft,\r\n\t\t\t\tmaxWidthRadius;\r\n\t\t\tthis.ctx.font = fontString(this.pointLabelFontSize,this.pointLabelFontStyle,this.pointLabelFontFamily);\r\n\t\t\tfor (i=0;i<this.valuesCount;i++){\r\n\t\t\t\t// 5px to space the text slightly out - similar to what we do in the draw function.\r\n\t\t\t\tpointPosition = this.getPointPosition(i, largestPossibleRadius);\r\n\t\t\t\ttextWidth = this.ctx.measureText(template(this.templateString, { value: this.labels[i] })).width + 5;\r\n\t\t\t\tif (i === 0 || i === this.valuesCount/2){\r\n\t\t\t\t\t// If we're at index zero, or exactly the middle, we're at exactly the top/bottom\r\n\t\t\t\t\t// of the radar chart, so text will be aligned centrally, so we'll half it and compare\r\n\t\t\t\t\t// w/left and right text sizes\r\n\t\t\t\t\thalfTextWidth = textWidth/2;\r\n\t\t\t\t\tif (pointPosition.x + halfTextWidth > furthestRight) {\r\n\t\t\t\t\t\tfurthestRight = pointPosition.x + halfTextWidth;\r\n\t\t\t\t\t\tfurthestRightIndex = i;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (pointPosition.x - halfTextWidth < furthestLeft) {\r\n\t\t\t\t\t\tfurthestLeft = pointPosition.x - halfTextWidth;\r\n\t\t\t\t\t\tfurthestLeftIndex = i;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (i < this.valuesCount/2) {\r\n\t\t\t\t\t// Less than half the values means we'll left align the text\r\n\t\t\t\t\tif (pointPosition.x + textWidth > furthestRight) {\r\n\t\t\t\t\t\tfurthestRight = pointPosition.x + textWidth;\r\n\t\t\t\t\t\tfurthestRightIndex = i;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (i > this.valuesCount/2){\r\n\t\t\t\t\t// More than half the values means we'll right align the text\r\n\t\t\t\t\tif (pointPosition.x - textWidth < furthestLeft) {\r\n\t\t\t\t\t\tfurthestLeft = pointPosition.x - textWidth;\r\n\t\t\t\t\t\tfurthestLeftIndex = i;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\txProtrusionLeft = furthestLeft;\r\n\r\n\t\t\txProtrusionRight = Math.ceil(furthestRight - this.width);\r\n\r\n\t\t\tfurthestRightAngle = this.getIndexAngle(furthestRightIndex);\r\n\r\n\t\t\tfurthestLeftAngle = this.getIndexAngle(furthestLeftIndex);\r\n\r\n\t\t\tradiusReductionRight = xProtrusionRight / Math.sin(furthestRightAngle + Math.PI/2);\r\n\r\n\t\t\tradiusReductionLeft = xProtrusionLeft / Math.sin(furthestLeftAngle + Math.PI/2);\r\n\r\n\t\t\t// Ensure we actually need to reduce the size of the chart\r\n\t\t\tradiusReductionRight = (isNumber(radiusReductionRight)) ? radiusReductionRight : 0;\r\n\t\t\tradiusReductionLeft = (isNumber(radiusReductionLeft)) ? radiusReductionLeft : 0;\r\n\r\n\t\t\tthis.drawingArea = largestPossibleRadius - (radiusReductionLeft + radiusReductionRight)/2;\r\n\r\n\t\t\t//this.drawingArea = min([maxWidthRadius, (this.height - (2 * (this.pointLabelFontSize + 5)))/2])\r\n\t\t\tthis.setCenterPoint(radiusReductionLeft, radiusReductionRight);\r\n\r\n\t\t},\r\n\t\tsetCenterPoint: function(leftMovement, rightMovement){\r\n\r\n\t\t\tvar maxRight = this.width - rightMovement - this.drawingArea,\r\n\t\t\t\tmaxLeft = leftMovement + this.drawingArea;\r\n\r\n\t\t\tthis.xCenter = (maxLeft + maxRight)/2;\r\n\t\t\t// Always vertically in the centre as the text height doesn't change\r\n\t\t\tthis.yCenter = (this.height/2);\r\n\t\t},\r\n\r\n\t\tgetIndexAngle : function(index){\r\n\t\t\tvar angleMultiplier = (Math.PI * 2) / this.valuesCount;\r\n\t\t\t// Start from the top instead of right, so remove a quarter of the circle\r\n\r\n\t\t\treturn index * angleMultiplier - (Math.PI/2);\r\n\t\t},\r\n\t\tgetPointPosition : function(index, distanceFromCenter){\r\n\t\t\tvar thisAngle = this.getIndexAngle(index);\r\n\t\t\treturn {\r\n\t\t\t\tx : (Math.cos(thisAngle) * distanceFromCenter) + this.xCenter,\r\n\t\t\t\ty : (Math.sin(thisAngle) * distanceFromCenter) + this.yCenter\r\n\t\t\t};\r\n\t\t},\r\n\t\tdraw: function(){\r\n\t\t\tif (this.display){\r\n\t\t\t\tvar ctx = this.ctx;\r\n\t\t\t\teach(this.yLabels, function(label, index){\r\n\t\t\t\t\t// Don't draw a centre value\r\n\t\t\t\t\tif (index > 0){\r\n\t\t\t\t\t\tvar yCenterOffset = index * (this.drawingArea/this.steps),\r\n\t\t\t\t\t\t\tyHeight = this.yCenter - yCenterOffset,\r\n\t\t\t\t\t\t\tpointPosition;\r\n\r\n\t\t\t\t\t\t// Draw circular lines around the scale\r\n\t\t\t\t\t\tif (this.lineWidth > 0){\r\n\t\t\t\t\t\t\tctx.strokeStyle = this.lineColor;\r\n\t\t\t\t\t\t\tctx.lineWidth = this.lineWidth;\r\n\r\n\t\t\t\t\t\t\tif(this.lineArc){\r\n\t\t\t\t\t\t\t\tctx.beginPath();\r\n\t\t\t\t\t\t\t\tctx.arc(this.xCenter, this.yCenter, yCenterOffset, 0, Math.PI*2);\r\n\t\t\t\t\t\t\t\tctx.closePath();\r\n\t\t\t\t\t\t\t\tctx.stroke();\r\n\t\t\t\t\t\t\t} else{\r\n\t\t\t\t\t\t\t\tctx.beginPath();\r\n\t\t\t\t\t\t\t\tfor (var i=0;i<this.valuesCount;i++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tpointPosition = this.getPointPosition(i, this.calculateCenterOffset(this.min + (index * this.stepValue)));\r\n\t\t\t\t\t\t\t\t\tif (i === 0){\r\n\t\t\t\t\t\t\t\t\t\tctx.moveTo(pointPosition.x, pointPosition.y);\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tctx.lineTo(pointPosition.x, pointPosition.y);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tctx.closePath();\r\n\t\t\t\t\t\t\t\tctx.stroke();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(this.showLabels){\r\n\t\t\t\t\t\t\tctx.font = fontString(this.fontSize,this.fontStyle,this.fontFamily);\r\n\t\t\t\t\t\t\tif (this.showLabelBackdrop){\r\n\t\t\t\t\t\t\t\tvar labelWidth = ctx.measureText(label).width;\r\n\t\t\t\t\t\t\t\tctx.fillStyle = this.backdropColor;\r\n\t\t\t\t\t\t\t\tctx.fillRect(\r\n\t\t\t\t\t\t\t\t\tthis.xCenter - labelWidth/2 - this.backdropPaddingX,\r\n\t\t\t\t\t\t\t\t\tyHeight - this.fontSize/2 - this.backdropPaddingY,\r\n\t\t\t\t\t\t\t\t\tlabelWidth + this.backdropPaddingX*2,\r\n\t\t\t\t\t\t\t\t\tthis.fontSize + this.backdropPaddingY*2\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tctx.textAlign = 'center';\r\n\t\t\t\t\t\t\tctx.textBaseline = \"middle\";\r\n\t\t\t\t\t\t\tctx.fillStyle = this.fontColor;\r\n\t\t\t\t\t\t\tctx.fillText(label, this.xCenter, yHeight);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}, this);\r\n\r\n\t\t\t\tif (!this.lineArc){\r\n\t\t\t\t\tctx.lineWidth = this.angleLineWidth;\r\n\t\t\t\t\tctx.strokeStyle = this.angleLineColor;\r\n\t\t\t\t\tfor (var i = this.valuesCount - 1; i >= 0; i--) {\r\n\t\t\t\t\t\tif (this.angleLineWidth > 0){\r\n\t\t\t\t\t\t\tvar outerPosition = this.getPointPosition(i, this.calculateCenterOffset(this.max));\r\n\t\t\t\t\t\t\tctx.beginPath();\r\n\t\t\t\t\t\t\tctx.moveTo(this.xCenter, this.yCenter);\r\n\t\t\t\t\t\t\tctx.lineTo(outerPosition.x, outerPosition.y);\r\n\t\t\t\t\t\t\tctx.stroke();\r\n\t\t\t\t\t\t\tctx.closePath();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// Extra 3px out for some label spacing\r\n\t\t\t\t\t\tvar pointLabelPosition = this.getPointPosition(i, this.calculateCenterOffset(this.max) + 5);\r\n\t\t\t\t\t\tctx.font = fontString(this.pointLabelFontSize,this.pointLabelFontStyle,this.pointLabelFontFamily);\r\n\t\t\t\t\t\tctx.fillStyle = this.pointLabelFontColor;\r\n\r\n\t\t\t\t\t\tvar labelsCount = this.labels.length,\r\n\t\t\t\t\t\t\thalfLabelsCount = this.labels.length/2,\r\n\t\t\t\t\t\t\tquarterLabelsCount = halfLabelsCount/2,\r\n\t\t\t\t\t\t\tupperHalf = (i < quarterLabelsCount || i > labelsCount - quarterLabelsCount),\r\n\t\t\t\t\t\t\texactQuarter = (i === quarterLabelsCount || i === labelsCount - quarterLabelsCount);\r\n\t\t\t\t\t\tif (i === 0){\r\n\t\t\t\t\t\t\tctx.textAlign = 'center';\r\n\t\t\t\t\t\t} else if(i === halfLabelsCount){\r\n\t\t\t\t\t\t\tctx.textAlign = 'center';\r\n\t\t\t\t\t\t} else if (i < halfLabelsCount){\r\n\t\t\t\t\t\t\tctx.textAlign = 'left';\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tctx.textAlign = 'right';\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Set the correct text baseline based on outer positioning\r\n\t\t\t\t\t\tif (exactQuarter){\r\n\t\t\t\t\t\t\tctx.textBaseline = 'middle';\r\n\t\t\t\t\t\t} else if (upperHalf){\r\n\t\t\t\t\t\t\tctx.textBaseline = 'bottom';\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tctx.textBaseline = 'top';\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tctx.fillText(this.labels[i], pointLabelPosition.x, pointLabelPosition.y);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\t// Attach global event to resize each chart instance when the browser resizes\r\n\thelpers.addEvent(window, \"resize\", (function(){\r\n\t\t// Basic debounce of resize function so it doesn't hurt performance when resizing browser.\r\n\t\tvar timeout;\r\n\t\treturn function(){\r\n\t\t\tclearTimeout(timeout);\r\n\t\t\ttimeout = setTimeout(function(){\r\n\t\t\t\teach(Chart.instances,function(instance){\r\n\t\t\t\t\t// If the responsive flag is set in the chart instance config\r\n\t\t\t\t\t// Cascade the resize event down to the chart.\r\n\t\t\t\t\tif (instance.options.responsive){\r\n\t\t\t\t\t\tinstance.resize(instance.render, true);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}, 50);\r\n\t\t};\r\n\t})());\r\n\r\n\r\n\tif (amd) {\r\n\t\tdefine(function(){\r\n\t\t\treturn Chart;\r\n\t\t});\r\n\t} else if (typeof module === 'object' && module.exports) {\r\n\t\tmodule.exports = Chart;\r\n\t}\r\n\r\n\troot.Chart = Chart;\r\n\r\n\tChart.noConflict = function(){\r\n\t\troot.Chart = previous;\r\n\t\treturn Chart;\r\n\t};\r\n\r\n}).call(this);\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tvar root = this,\r\n\t\tChart = root.Chart,\r\n\t\thelpers = Chart.helpers;\r\n\r\n\r\n\tvar defaultConfig = {\r\n\t\t//Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value\r\n\t\tscaleBeginAtZero : true,\r\n\r\n\t\t//Boolean - Whether grid lines are shown across the chart\r\n\t\tscaleShowGridLines : true,\r\n\r\n\t\t//String - Colour of the grid lines\r\n\t\tscaleGridLineColor : \"rgba(0,0,0,.05)\",\r\n\r\n\t\t//Number - Width of the grid lines\r\n\t\tscaleGridLineWidth : 1,\r\n\r\n\t\t//Boolean - If there is a stroke on each bar\r\n\t\tbarShowStroke : true,\r\n\r\n\t\t//Number - Pixel width of the bar stroke\r\n\t\tbarStrokeWidth : 2,\r\n\r\n\t\t//Number - Spacing between each of the X value sets\r\n\t\tbarValueSpacing : 5,\r\n\r\n\t\t//Number - Spacing between data sets within X values\r\n\t\tbarDatasetSpacing : 1,\r\n\r\n\t\t//String - A legend template\r\n\t\tlegendTemplate : \"<ul class=\\\"<%=name.toLowerCase()%>-legend\\\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\\\"background-color:<%=datasets[i].fillColor%>\\\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>\"\r\n\r\n\t};\r\n\r\n\r\n\tChart.Type.extend({\r\n\t\tname: \"Bar\",\r\n\t\tdefaults : defaultConfig,\r\n\t\tinitialize:  function(data){\r\n\r\n\t\t\t//Expose options as a scope variable here so we can access it in the ScaleClass\r\n\t\t\tvar options = this.options;\r\n\r\n\t\t\tthis.ScaleClass = Chart.Scale.extend({\r\n\t\t\t\toffsetGridLines : true,\r\n\t\t\t\tcalculateBarX : function(datasetCount, datasetIndex, barIndex){\r\n\t\t\t\t\t//Reusable method for calculating the xPosition of a given bar based on datasetIndex & width of the bar\r\n\t\t\t\t\tvar xWidth = this.calculateBaseWidth(),\r\n\t\t\t\t\t\txAbsolute = this.calculateX(barIndex) - (xWidth/2),\r\n\t\t\t\t\t\tbarWidth = this.calculateBarWidth(datasetCount);\r\n\r\n\t\t\t\t\treturn xAbsolute + (barWidth * datasetIndex) + (datasetIndex * options.barDatasetSpacing) + barWidth/2;\r\n\t\t\t\t},\r\n\t\t\t\tcalculateBaseWidth : function(){\r\n\t\t\t\t\treturn (this.calculateX(1) - this.calculateX(0)) - (2*options.barValueSpacing);\r\n\t\t\t\t},\r\n\t\t\t\tcalculateBarWidth : function(datasetCount){\r\n\t\t\t\t\t//The padding between datasets is to the right of each bar, providing that there are more than 1 dataset\r\n\t\t\t\t\tvar baseWidth = this.calculateBaseWidth() - ((datasetCount - 1) * options.barDatasetSpacing);\r\n\r\n\t\t\t\t\treturn (baseWidth / datasetCount);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tthis.datasets = [];\r\n\r\n\t\t\t//Set up tooltip events on the chart\r\n\t\t\tif (this.options.showTooltips){\r\n\t\t\t\thelpers.bindEvents(this, this.options.tooltipEvents, function(evt){\r\n\t\t\t\t\tvar activeBars = (evt.type !== 'mouseout') ? this.getBarsAtEvent(evt) : [];\r\n\r\n\t\t\t\t\tthis.eachBars(function(bar){\r\n\t\t\t\t\t\tbar.restore(['fillColor', 'strokeColor']);\r\n\t\t\t\t\t});\r\n\t\t\t\t\thelpers.each(activeBars, function(activeBar){\r\n\t\t\t\t\t\tactiveBar.fillColor = activeBar.highlightFill;\r\n\t\t\t\t\t\tactiveBar.strokeColor = activeBar.highlightStroke;\r\n\t\t\t\t\t});\r\n\t\t\t\t\tthis.showTooltip(activeBars);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\t//Declare the extension of the default point, to cater for the options passed in to the constructor\r\n\t\t\tthis.BarClass = Chart.Rectangle.extend({\r\n\t\t\t\tstrokeWidth : this.options.barStrokeWidth,\r\n\t\t\t\tshowStroke : this.options.barShowStroke,\r\n\t\t\t\tctx : this.chart.ctx\r\n\t\t\t});\r\n\r\n\t\t\t//Iterate through each of the datasets, and build this into a property of the chart\r\n\t\t\thelpers.each(data.datasets,function(dataset,datasetIndex){\r\n\r\n\t\t\t\tvar datasetObject = {\r\n\t\t\t\t\tlabel : dataset.label || null,\r\n\t\t\t\t\tfillColor : dataset.fillColor,\r\n\t\t\t\t\tstrokeColor : dataset.strokeColor,\r\n\t\t\t\t\tbars : []\r\n\t\t\t\t};\r\n\r\n\t\t\t\tthis.datasets.push(datasetObject);\r\n\r\n\t\t\t\thelpers.each(dataset.data,function(dataPoint,index){\r\n\t\t\t\t\t//Add a new point for each piece of data, passing any required data to draw.\r\n\t\t\t\t\tdatasetObject.bars.push(new this.BarClass({\r\n\t\t\t\t\t\tvalue : dataPoint,\r\n\t\t\t\t\t\tlabel : data.labels[index],\r\n\t\t\t\t\t\tdatasetLabel: dataset.label,\r\n\t\t\t\t\t\tstrokeColor : dataset.strokeColor,\r\n\t\t\t\t\t\tfillColor : dataset.fillColor,\r\n\t\t\t\t\t\thighlightFill : dataset.highlightFill || dataset.fillColor,\r\n\t\t\t\t\t\thighlightStroke : dataset.highlightStroke || dataset.strokeColor\r\n\t\t\t\t\t}));\r\n\t\t\t\t},this);\r\n\r\n\t\t\t},this);\r\n\r\n\t\t\tthis.buildScale(data.labels);\r\n\r\n\t\t\tthis.BarClass.prototype.base = this.scale.endPoint;\r\n\r\n\t\t\tthis.eachBars(function(bar, index, datasetIndex){\r\n\t\t\t\thelpers.extend(bar, {\r\n\t\t\t\t\twidth : this.scale.calculateBarWidth(this.datasets.length),\r\n\t\t\t\t\tx: this.scale.calculateBarX(this.datasets.length, datasetIndex, index),\r\n\t\t\t\t\ty: this.scale.endPoint\r\n\t\t\t\t});\r\n\t\t\t\tbar.save();\r\n\t\t\t}, this);\r\n\r\n\t\t\tthis.render();\r\n\t\t},\r\n\t\tupdate : function(){\r\n\t\t\tthis.scale.update();\r\n\t\t\t// Reset any highlight colours before updating.\r\n\t\t\thelpers.each(this.activeElements, function(activeElement){\r\n\t\t\t\tactiveElement.restore(['fillColor', 'strokeColor']);\r\n\t\t\t});\r\n\r\n\t\t\tthis.eachBars(function(bar){\r\n\t\t\t\tbar.save();\r\n\t\t\t});\r\n\t\t\tthis.render();\r\n\t\t},\r\n\t\teachBars : function(callback){\r\n\t\t\thelpers.each(this.datasets,function(dataset, datasetIndex){\r\n\t\t\t\thelpers.each(dataset.bars, callback, this, datasetIndex);\r\n\t\t\t},this);\r\n\t\t},\r\n\t\tgetBarsAtEvent : function(e){\r\n\t\t\tvar barsArray = [],\r\n\t\t\t\teventPosition = helpers.getRelativePosition(e),\r\n\t\t\t\tdatasetIterator = function(dataset){\r\n\t\t\t\t\tbarsArray.push(dataset.bars[barIndex]);\r\n\t\t\t\t},\r\n\t\t\t\tbarIndex;\r\n\r\n\t\t\tfor (var datasetIndex = 0; datasetIndex < this.datasets.length; datasetIndex++) {\r\n\t\t\t\tfor (barIndex = 0; barIndex < this.datasets[datasetIndex].bars.length; barIndex++) {\r\n\t\t\t\t\tif (this.datasets[datasetIndex].bars[barIndex].inRange(eventPosition.x,eventPosition.y)){\r\n\t\t\t\t\t\thelpers.each(this.datasets, datasetIterator);\r\n\t\t\t\t\t\treturn barsArray;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn barsArray;\r\n\t\t},\r\n\t\tbuildScale : function(labels){\r\n\t\t\tvar self = this;\r\n\r\n\t\t\tvar dataTotal = function(){\r\n\t\t\t\tvar values = [];\r\n\t\t\t\tself.eachBars(function(bar){\r\n\t\t\t\t\tvalues.push(bar.value);\r\n\t\t\t\t});\r\n\t\t\t\treturn values;\r\n\t\t\t};\r\n\r\n\t\t\tvar scaleOptions = {\r\n\t\t\t\ttemplateString : this.options.scaleLabel,\r\n\t\t\t\theight : this.chart.height,\r\n\t\t\t\twidth : this.chart.width,\r\n\t\t\t\tctx : this.chart.ctx,\r\n\t\t\t\ttextColor : this.options.scaleFontColor,\r\n\t\t\t\tfontSize : this.options.scaleFontSize,\r\n\t\t\t\tfontStyle : this.options.scaleFontStyle,\r\n\t\t\t\tfontFamily : this.options.scaleFontFamily,\r\n\t\t\t\tvaluesCount : labels.length,\r\n\t\t\t\tbeginAtZero : this.options.scaleBeginAtZero,\r\n\t\t\t\tintegersOnly : this.options.scaleIntegersOnly,\r\n\t\t\t\tcalculateYRange: function(currentHeight){\r\n\t\t\t\t\tvar updatedRanges = helpers.calculateScaleRange(\r\n\t\t\t\t\t\tdataTotal(),\r\n\t\t\t\t\t\tcurrentHeight,\r\n\t\t\t\t\t\tthis.fontSize,\r\n\t\t\t\t\t\tthis.beginAtZero,\r\n\t\t\t\t\t\tthis.integersOnly\r\n\t\t\t\t\t);\r\n\t\t\t\t\thelpers.extend(this, updatedRanges);\r\n\t\t\t\t},\r\n\t\t\t\txLabels : labels,\r\n\t\t\t\tfont : helpers.fontString(this.options.scaleFontSize, this.options.scaleFontStyle, this.options.scaleFontFamily),\r\n\t\t\t\tlineWidth : this.options.scaleLineWidth,\r\n\t\t\t\tlineColor : this.options.scaleLineColor,\r\n\t\t\t\tgridLineWidth : (this.options.scaleShowGridLines) ? this.options.scaleGridLineWidth : 0,\r\n\t\t\t\tgridLineColor : (this.options.scaleShowGridLines) ? this.options.scaleGridLineColor : \"rgba(0,0,0,0)\",\r\n\t\t\t\tpadding : (this.options.showScale) ? 0 : (this.options.barShowStroke) ? this.options.barStrokeWidth : 0,\r\n\t\t\t\tshowLabels : this.options.scaleShowLabels,\r\n\t\t\t\tdisplay : this.options.showScale\r\n\t\t\t};\r\n\r\n\t\t\tif (this.options.scaleOverride){\r\n\t\t\t\thelpers.extend(scaleOptions, {\r\n\t\t\t\t\tcalculateYRange: helpers.noop,\r\n\t\t\t\t\tsteps: this.options.scaleSteps,\r\n\t\t\t\t\tstepValue: this.options.scaleStepWidth,\r\n\t\t\t\t\tmin: this.options.scaleStartValue,\r\n\t\t\t\t\tmax: this.options.scaleStartValue + (this.options.scaleSteps * this.options.scaleStepWidth)\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis.scale = new this.ScaleClass(scaleOptions);\r\n\t\t},\r\n\t\taddData : function(valuesArray,label){\r\n\t\t\t//Map the values array for each of the datasets\r\n\t\t\thelpers.each(valuesArray,function(value,datasetIndex){\r\n\t\t\t\t//Add a new point for each piece of data, passing any required data to draw.\r\n\t\t\t\tthis.datasets[datasetIndex].bars.push(new this.BarClass({\r\n\t\t\t\t\tvalue : value,\r\n\t\t\t\t\tlabel : label,\r\n\t\t\t\t\tx: this.scale.calculateBarX(this.datasets.length, datasetIndex, this.scale.valuesCount+1),\r\n\t\t\t\t\ty: this.scale.endPoint,\r\n\t\t\t\t\twidth : this.scale.calculateBarWidth(this.datasets.length),\r\n\t\t\t\t\tbase : this.scale.endPoint,\r\n\t\t\t\t\tstrokeColor : this.datasets[datasetIndex].strokeColor,\r\n\t\t\t\t\tfillColor : this.datasets[datasetIndex].fillColor\r\n\t\t\t\t}));\r\n\t\t\t},this);\r\n\r\n\t\t\tthis.scale.addXLabel(label);\r\n\t\t\t//Then re-render the chart.\r\n\t\t\tthis.update();\r\n\t\t},\r\n\t\tremoveData : function(){\r\n\t\t\tthis.scale.removeXLabel();\r\n\t\t\t//Then re-render the chart.\r\n\t\t\thelpers.each(this.datasets,function(dataset){\r\n\t\t\t\tdataset.bars.shift();\r\n\t\t\t},this);\r\n\t\t\tthis.update();\r\n\t\t},\r\n\t\treflow : function(){\r\n\t\t\thelpers.extend(this.BarClass.prototype,{\r\n\t\t\t\ty: this.scale.endPoint,\r\n\t\t\t\tbase : this.scale.endPoint\r\n\t\t\t});\r\n\t\t\tvar newScaleProps = helpers.extend({\r\n\t\t\t\theight : this.chart.height,\r\n\t\t\t\twidth : this.chart.width\r\n\t\t\t});\r\n\t\t\tthis.scale.update(newScaleProps);\r\n\t\t},\r\n\t\tdraw : function(ease){\r\n\t\t\tvar easingDecimal = ease || 1;\r\n\t\t\tthis.clear();\r\n\r\n\t\t\tvar ctx = this.chart.ctx;\r\n\r\n\t\t\tthis.scale.draw(easingDecimal);\r\n\r\n\t\t\t//Draw all the bars for each dataset\r\n\t\t\thelpers.each(this.datasets,function(dataset,datasetIndex){\r\n\t\t\t\thelpers.each(dataset.bars,function(bar,index){\r\n\t\t\t\t\tif (bar.hasValue()){\r\n\t\t\t\t\t\tbar.base = this.scale.endPoint;\r\n\t\t\t\t\t\t//Transition then draw\r\n\t\t\t\t\t\tbar.transition({\r\n\t\t\t\t\t\t\tx : this.scale.calculateBarX(this.datasets.length, datasetIndex, index),\r\n\t\t\t\t\t\t\ty : this.scale.calculateY(bar.value),\r\n\t\t\t\t\t\t\twidth : this.scale.calculateBarWidth(this.datasets.length)\r\n\t\t\t\t\t\t}, easingDecimal).draw();\r\n\t\t\t\t\t}\r\n\t\t\t\t},this);\r\n\r\n\t\t\t},this);\r\n\t\t}\r\n\t});\r\n\r\n\r\n}).call(this);\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tvar root = this,\r\n\t\tChart = root.Chart,\r\n\t\t//Cache a local reference to Chart.helpers\r\n\t\thelpers = Chart.helpers;\r\n\r\n\tvar defaultConfig = {\r\n\t\t//Boolean - Whether we should show a stroke on each segment\r\n\t\tsegmentShowStroke : true,\r\n\r\n\t\t//String - The colour of each segment stroke\r\n\t\tsegmentStrokeColor : \"#fff\",\r\n\r\n\t\t//Number - The width of each segment stroke\r\n\t\tsegmentStrokeWidth : 2,\r\n\r\n\t\t//The percentage of the chart that we cut out of the middle.\r\n\t\tpercentageInnerCutout : 50,\r\n\r\n\t\t//Number - Amount of animation steps\r\n\t\tanimationSteps : 100,\r\n\r\n\t\t//String - Animation easing effect\r\n\t\tanimationEasing : \"easeOutBounce\",\r\n\r\n\t\t//Boolean - Whether we animate the rotation of the Doughnut\r\n\t\tanimateRotate : true,\r\n\r\n\t\t//Boolean - Whether we animate scaling the Doughnut from the centre\r\n\t\tanimateScale : false,\r\n\r\n\t\t//String - A legend template\r\n\t\tlegendTemplate : \"<ul class=\\\"<%=name.toLowerCase()%>-legend\\\"><% for (var i=0; i<segments.length; i++){%><li><span style=\\\"background-color:<%=segments[i].fillColor%>\\\"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>\"\r\n\r\n\t};\r\n\r\n\r\n\tChart.Type.extend({\r\n\t\t//Passing in a name registers this chart in the Chart namespace\r\n\t\tname: \"Doughnut\",\r\n\t\t//Providing a defaults will also register the deafults in the chart namespace\r\n\t\tdefaults : defaultConfig,\r\n\t\t//Initialize is fired when the chart is initialized - Data is passed in as a parameter\r\n\t\t//Config is automatically merged by the core of Chart.js, and is available at this.options\r\n\t\tinitialize:  function(data){\r\n\r\n\t\t\t//Declare segments as a static property to prevent inheriting across the Chart type prototype\r\n\t\t\tthis.segments = [];\r\n\t\t\tthis.outerRadius = (helpers.min([this.chart.width,this.chart.height]) -\tthis.options.segmentStrokeWidth/2)/2;\r\n\r\n\t\t\tthis.SegmentArc = Chart.Arc.extend({\r\n\t\t\t\tctx : this.chart.ctx,\r\n\t\t\t\tx : this.chart.width/2,\r\n\t\t\t\ty : this.chart.height/2\r\n\t\t\t});\r\n\r\n\t\t\t//Set up tooltip events on the chart\r\n\t\t\tif (this.options.showTooltips){\r\n\t\t\t\thelpers.bindEvents(this, this.options.tooltipEvents, function(evt){\r\n\t\t\t\t\tvar activeSegments = (evt.type !== 'mouseout') ? this.getSegmentsAtEvent(evt) : [];\r\n\r\n\t\t\t\t\thelpers.each(this.segments,function(segment){\r\n\t\t\t\t\t\tsegment.restore([\"fillColor\"]);\r\n\t\t\t\t\t});\r\n\t\t\t\t\thelpers.each(activeSegments,function(activeSegment){\r\n\t\t\t\t\t\tactiveSegment.fillColor = activeSegment.highlightColor;\r\n\t\t\t\t\t});\r\n\t\t\t\t\tthis.showTooltip(activeSegments);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tthis.calculateTotal(data);\r\n\r\n\t\t\thelpers.each(data,function(datapoint, index){\r\n\t\t\t\tthis.addData(datapoint, index, true);\r\n\t\t\t},this);\r\n\r\n\t\t\tthis.render();\r\n\t\t},\r\n\t\tgetSegmentsAtEvent : function(e){\r\n\t\t\tvar segmentsArray = [];\r\n\r\n\t\t\tvar location = helpers.getRelativePosition(e);\r\n\r\n\t\t\thelpers.each(this.segments,function(segment){\r\n\t\t\t\tif (segment.inRange(location.x,location.y)) segmentsArray.push(segment);\r\n\t\t\t},this);\r\n\t\t\treturn segmentsArray;\r\n\t\t},\r\n\t\taddData : function(segment, atIndex, silent){\r\n\t\t\tvar index = atIndex || this.segments.length;\r\n\t\t\tthis.segments.splice(index, 0, new this.SegmentArc({\r\n\t\t\t\tvalue : segment.value,\r\n\t\t\t\touterRadius : (this.options.animateScale) ? 0 : this.outerRadius,\r\n\t\t\t\tinnerRadius : (this.options.animateScale) ? 0 : (this.outerRadius/100) * this.options.percentageInnerCutout,\r\n\t\t\t\tfillColor : segment.color,\r\n\t\t\t\thighlightColor : segment.highlight || segment.color,\r\n\t\t\t\tshowStroke : this.options.segmentShowStroke,\r\n\t\t\t\tstrokeWidth : this.options.segmentStrokeWidth,\r\n\t\t\t\tstrokeColor : this.options.segmentStrokeColor,\r\n\t\t\t\tstartAngle : Math.PI * 1.5,\r\n\t\t\t\tcircumference : (this.options.animateRotate) ? 0 : this.calculateCircumference(segment.value),\r\n\t\t\t\tlabel : segment.label\r\n\t\t\t}));\r\n\t\t\tif (!silent){\r\n\t\t\t\tthis.reflow();\r\n\t\t\t\tthis.update();\r\n\t\t\t}\r\n\t\t},\r\n\t\tcalculateCircumference : function(value){\r\n\t\t\treturn (Math.PI*2)*(value / this.total);\r\n\t\t},\r\n\t\tcalculateTotal : function(data){\r\n\t\t\tthis.total = 0;\r\n\t\t\thelpers.each(data,function(segment){\r\n\t\t\t\tthis.total += segment.value;\r\n\t\t\t},this);\r\n\t\t},\r\n\t\tupdate : function(){\r\n\t\t\tthis.calculateTotal(this.segments);\r\n\r\n\t\t\t// Reset any highlight colours before updating.\r\n\t\t\thelpers.each(this.activeElements, function(activeElement){\r\n\t\t\t\tactiveElement.restore(['fillColor']);\r\n\t\t\t});\r\n\r\n\t\t\thelpers.each(this.segments,function(segment){\r\n\t\t\t\tsegment.save();\r\n\t\t\t});\r\n\t\t\tthis.render();\r\n\t\t},\r\n\r\n\t\tremoveData: function(atIndex){\r\n\t\t\tvar indexToDelete = (helpers.isNumber(atIndex)) ? atIndex : this.segments.length-1;\r\n\t\t\tthis.segments.splice(indexToDelete, 1);\r\n\t\t\tthis.reflow();\r\n\t\t\tthis.update();\r\n\t\t},\r\n\r\n\t\treflow : function(){\r\n\t\t\thelpers.extend(this.SegmentArc.prototype,{\r\n\t\t\t\tx : this.chart.width/2,\r\n\t\t\t\ty : this.chart.height/2\r\n\t\t\t});\r\n\t\t\tthis.outerRadius = (helpers.min([this.chart.width,this.chart.height]) -\tthis.options.segmentStrokeWidth/2)/2;\r\n\t\t\thelpers.each(this.segments, function(segment){\r\n\t\t\t\tsegment.update({\r\n\t\t\t\t\touterRadius : this.outerRadius,\r\n\t\t\t\t\tinnerRadius : (this.outerRadius/100) * this.options.percentageInnerCutout\r\n\t\t\t\t});\r\n\t\t\t}, this);\r\n\t\t},\r\n\t\tdraw : function(easeDecimal){\r\n\t\t\tvar animDecimal = (easeDecimal) ? easeDecimal : 1;\r\n\t\t\tthis.clear();\r\n\t\t\thelpers.each(this.segments,function(segment,index){\r\n\t\t\t\tsegment.transition({\r\n\t\t\t\t\tcircumference : this.calculateCircumference(segment.value),\r\n\t\t\t\t\touterRadius : this.outerRadius,\r\n\t\t\t\t\tinnerRadius : (this.outerRadius/100) * this.options.percentageInnerCutout\r\n\t\t\t\t},animDecimal);\r\n\r\n\t\t\t\tsegment.endAngle = segment.startAngle + segment.circumference;\r\n\r\n\t\t\t\tsegment.draw();\r\n\t\t\t\tif (index === 0){\r\n\t\t\t\t\tsegment.startAngle = Math.PI * 1.5;\r\n\t\t\t\t}\r\n\t\t\t\t//Check to see if it's the last segment, if not get the next and update the start angle\r\n\t\t\t\tif (index < this.segments.length-1){\r\n\t\t\t\t\tthis.segments[index+1].startAngle = segment.endAngle;\r\n\t\t\t\t}\r\n\t\t\t},this);\r\n\r\n\t\t}\r\n\t});\r\n\r\n\tChart.types.Doughnut.extend({\r\n\t\tname : \"Pie\",\r\n\t\tdefaults : helpers.merge(defaultConfig,{percentageInnerCutout : 0})\r\n\t});\r\n\r\n}).call(this);\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tvar root = this,\r\n\t\tChart = root.Chart,\r\n\t\thelpers = Chart.helpers;\r\n\r\n\tvar defaultConfig = {\r\n\r\n\t\t///Boolean - Whether grid lines are shown across the chart\r\n\t\tscaleShowGridLines : true,\r\n\r\n\t\t//String - Colour of the grid lines\r\n\t\tscaleGridLineColor : \"rgba(0,0,0,.05)\",\r\n\r\n\t\t//Number - Width of the grid lines\r\n\t\tscaleGridLineWidth : 1,\r\n\r\n\t\t//Boolean - Whether the line is curved between points\r\n\t\tbezierCurve : true,\r\n\r\n\t\t//Number - Tension of the bezier curve between points\r\n\t\tbezierCurveTension : 0.4,\r\n\r\n\t\t//Boolean - Whether to show a dot for each point\r\n\t\tpointDot : true,\r\n\r\n\t\t//Number - Radius of each point dot in pixels\r\n\t\tpointDotRadius : 4,\r\n\r\n\t\t//Number - Pixel width of point dot stroke\r\n\t\tpointDotStrokeWidth : 1,\r\n\r\n\t\t//Number - amount extra to add to the radius to cater for hit detection outside the drawn point\r\n\t\tpointHitDetectionRadius : 20,\r\n\r\n\t\t//Boolean - Whether to show a stroke for datasets\r\n\t\tdatasetStroke : true,\r\n\r\n\t\t//Number - Pixel width of dataset stroke\r\n\t\tdatasetStrokeWidth : 2,\r\n\r\n\t\t//Boolean - Whether to fill the dataset with a colour\r\n\t\tdatasetFill : true,\r\n\r\n\t\t//String - A legend template\r\n\t\tlegendTemplate : \"<ul class=\\\"<%=name.toLowerCase()%>-legend\\\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\\\"background-color:<%=datasets[i].strokeColor%>\\\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>\"\r\n\r\n\t};\r\n\r\n\r\n\tChart.Type.extend({\r\n\t\tname: \"Line\",\r\n\t\tdefaults : defaultConfig,\r\n\t\tinitialize:  function(data){\r\n\t\t\t//Declare the extension of the default point, to cater for the options passed in to the constructor\r\n\t\t\tthis.PointClass = Chart.Point.extend({\r\n\t\t\t\tstrokeWidth : this.options.pointDotStrokeWidth,\r\n\t\t\t\tradius : this.options.pointDotRadius,\r\n\t\t\t\tdisplay: this.options.pointDot,\r\n\t\t\t\thitDetectionRadius : this.options.pointHitDetectionRadius,\r\n\t\t\t\tctx : this.chart.ctx,\r\n\t\t\t\tinRange : function(mouseX){\r\n\t\t\t\t\treturn (Math.pow(mouseX-this.x, 2) < Math.pow(this.radius + this.hitDetectionRadius,2));\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tthis.datasets = [];\r\n\r\n\t\t\t//Set up tooltip events on the chart\r\n\t\t\tif (this.options.showTooltips){\r\n\t\t\t\thelpers.bindEvents(this, this.options.tooltipEvents, function(evt){\r\n\t\t\t\t\tvar activePoints = (evt.type !== 'mouseout') ? this.getPointsAtEvent(evt) : [];\r\n\t\t\t\t\tthis.eachPoints(function(point){\r\n\t\t\t\t\t\tpoint.restore(['fillColor', 'strokeColor']);\r\n\t\t\t\t\t});\r\n\t\t\t\t\thelpers.each(activePoints, function(activePoint){\r\n\t\t\t\t\t\tactivePoint.fillColor = activePoint.highlightFill;\r\n\t\t\t\t\t\tactivePoint.strokeColor = activePoint.highlightStroke;\r\n\t\t\t\t\t});\r\n\t\t\t\t\tthis.showTooltip(activePoints);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\t//Iterate through each of the datasets, and build this into a property of the chart\r\n\t\t\thelpers.each(data.datasets,function(dataset){\r\n\r\n\t\t\t\tvar datasetObject = {\r\n\t\t\t\t\tlabel : dataset.label || null,\r\n\t\t\t\t\tfillColor : dataset.fillColor,\r\n\t\t\t\t\tstrokeColor : dataset.strokeColor,\r\n\t\t\t\t\tpointColor : dataset.pointColor,\r\n\t\t\t\t\tpointStrokeColor : dataset.pointStrokeColor,\r\n\t\t\t\t\tpoints : []\r\n\t\t\t\t};\r\n\r\n\t\t\t\tthis.datasets.push(datasetObject);\r\n\r\n\r\n\t\t\t\thelpers.each(dataset.data,function(dataPoint,index){\r\n\t\t\t\t\t//Add a new point for each piece of data, passing any required data to draw.\r\n\t\t\t\t\tdatasetObject.points.push(new this.PointClass({\r\n\t\t\t\t\t\tvalue : dataPoint,\r\n\t\t\t\t\t\tlabel : data.labels[index],\r\n\t\t\t\t\t\tdatasetLabel: dataset.label,\r\n\t\t\t\t\t\tstrokeColor : dataset.pointStrokeColor,\r\n\t\t\t\t\t\tfillColor : dataset.pointColor,\r\n\t\t\t\t\t\thighlightFill : dataset.pointHighlightFill || dataset.pointColor,\r\n\t\t\t\t\t\thighlightStroke : dataset.pointHighlightStroke || dataset.pointStrokeColor\r\n\t\t\t\t\t}));\r\n\t\t\t\t},this);\r\n\r\n\t\t\t\tthis.buildScale(data.labels);\r\n\r\n\r\n\t\t\t\tthis.eachPoints(function(point, index){\r\n\t\t\t\t\thelpers.extend(point, {\r\n\t\t\t\t\t\tx: this.scale.calculateX(index),\r\n\t\t\t\t\t\ty: this.scale.endPoint\r\n\t\t\t\t\t});\r\n\t\t\t\t\tpoint.save();\r\n\t\t\t\t}, this);\r\n\r\n\t\t\t},this);\r\n\r\n\r\n\t\t\tthis.render();\r\n\t\t},\r\n\t\tupdate : function(){\r\n\t\t\tthis.scale.update();\r\n\t\t\t// Reset any highlight colours before updating.\r\n\t\t\thelpers.each(this.activeElements, function(activeElement){\r\n\t\t\t\tactiveElement.restore(['fillColor', 'strokeColor']);\r\n\t\t\t});\r\n\t\t\tthis.eachPoints(function(point){\r\n\t\t\t\tpoint.save();\r\n\t\t\t});\r\n\t\t\tthis.render();\r\n\t\t},\r\n\t\teachPoints : function(callback){\r\n\t\t\thelpers.each(this.datasets,function(dataset){\r\n\t\t\t\thelpers.each(dataset.points,callback,this);\r\n\t\t\t},this);\r\n\t\t},\r\n\t\tgetPointsAtEvent : function(e){\r\n\t\t\tvar pointsArray = [],\r\n\t\t\t\teventPosition = helpers.getRelativePosition(e);\r\n\t\t\thelpers.each(this.datasets,function(dataset){\r\n\t\t\t\thelpers.each(dataset.points,function(point){\r\n\t\t\t\t\tif (point.inRange(eventPosition.x,eventPosition.y)) pointsArray.push(point);\r\n\t\t\t\t});\r\n\t\t\t},this);\r\n\t\t\treturn pointsArray;\r\n\t\t},\r\n\t\tbuildScale : function(labels){\r\n\t\t\tvar self = this;\r\n\r\n\t\t\tvar dataTotal = function(){\r\n\t\t\t\tvar values = [];\r\n\t\t\t\tself.eachPoints(function(point){\r\n\t\t\t\t\tvalues.push(point.value);\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn values;\r\n\t\t\t};\r\n\r\n\t\t\tvar scaleOptions = {\r\n\t\t\t\ttemplateString : this.options.scaleLabel,\r\n\t\t\t\theight : this.chart.height,\r\n\t\t\t\twidth : this.chart.width,\r\n\t\t\t\tctx : this.chart.ctx,\r\n\t\t\t\ttextColor : this.options.scaleFontColor,\r\n\t\t\t\tfontSize : this.options.scaleFontSize,\r\n\t\t\t\tfontStyle : this.options.scaleFontStyle,\r\n\t\t\t\tfontFamily : this.options.scaleFontFamily,\r\n\t\t\t\tvaluesCount : labels.length,\r\n\t\t\t\tbeginAtZero : this.options.scaleBeginAtZero,\r\n\t\t\t\tintegersOnly : this.options.scaleIntegersOnly,\r\n\t\t\t\tcalculateYRange : function(currentHeight){\r\n\t\t\t\t\tvar updatedRanges = helpers.calculateScaleRange(\r\n\t\t\t\t\t\tdataTotal(),\r\n\t\t\t\t\t\tcurrentHeight,\r\n\t\t\t\t\t\tthis.fontSize,\r\n\t\t\t\t\t\tthis.beginAtZero,\r\n\t\t\t\t\t\tthis.integersOnly\r\n\t\t\t\t\t);\r\n\t\t\t\t\thelpers.extend(this, updatedRanges);\r\n\t\t\t\t},\r\n\t\t\t\txLabels : labels,\r\n\t\t\t\tfont : helpers.fontString(this.options.scaleFontSize, this.options.scaleFontStyle, this.options.scaleFontFamily),\r\n\t\t\t\tlineWidth : this.options.scaleLineWidth,\r\n\t\t\t\tlineColor : this.options.scaleLineColor,\r\n\t\t\t\tgridLineWidth : (this.options.scaleShowGridLines) ? this.options.scaleGridLineWidth : 0,\r\n\t\t\t\tgridLineColor : (this.options.scaleShowGridLines) ? this.options.scaleGridLineColor : \"rgba(0,0,0,0)\",\r\n\t\t\t\tpadding: (this.options.showScale) ? 0 : this.options.pointDotRadius + this.options.pointDotStrokeWidth,\r\n\t\t\t\tshowLabels : this.options.scaleShowLabels,\r\n\t\t\t\tdisplay : this.options.showScale\r\n\t\t\t};\r\n\r\n\t\t\tif (this.options.scaleOverride){\r\n\t\t\t\thelpers.extend(scaleOptions, {\r\n\t\t\t\t\tcalculateYRange: helpers.noop,\r\n\t\t\t\t\tsteps: this.options.scaleSteps,\r\n\t\t\t\t\tstepValue: this.options.scaleStepWidth,\r\n\t\t\t\t\tmin: this.options.scaleStartValue,\r\n\t\t\t\t\tmax: this.options.scaleStartValue + (this.options.scaleSteps * this.options.scaleStepWidth)\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\r\n\t\t\tthis.scale = new Chart.Scale(scaleOptions);\r\n\t\t},\r\n\t\taddData : function(valuesArray,label){\r\n\t\t\t//Map the values array for each of the datasets\r\n\r\n\t\t\thelpers.each(valuesArray,function(value,datasetIndex){\r\n\t\t\t\t//Add a new point for each piece of data, passing any required data to draw.\r\n\t\t\t\tthis.datasets[datasetIndex].points.push(new this.PointClass({\r\n\t\t\t\t\tvalue : value,\r\n\t\t\t\t\tlabel : label,\r\n\t\t\t\t\tx: this.scale.calculateX(this.scale.valuesCount+1),\r\n\t\t\t\t\ty: this.scale.endPoint,\r\n\t\t\t\t\tstrokeColor : this.datasets[datasetIndex].pointStrokeColor,\r\n\t\t\t\t\tfillColor : this.datasets[datasetIndex].pointColor\r\n\t\t\t\t}));\r\n\t\t\t},this);\r\n\r\n\t\t\tthis.scale.addXLabel(label);\r\n\t\t\t//Then re-render the chart.\r\n\t\t\tthis.update();\r\n\t\t},\r\n\t\tremoveData : function(){\r\n\t\t\tthis.scale.removeXLabel();\r\n\t\t\t//Then re-render the chart.\r\n\t\t\thelpers.each(this.datasets,function(dataset){\r\n\t\t\t\tdataset.points.shift();\r\n\t\t\t},this);\r\n\t\t\tthis.update();\r\n\t\t},\r\n\t\treflow : function(){\r\n\t\t\tvar newScaleProps = helpers.extend({\r\n\t\t\t\theight : this.chart.height,\r\n\t\t\t\twidth : this.chart.width\r\n\t\t\t});\r\n\t\t\tthis.scale.update(newScaleProps);\r\n\t\t},\r\n\t\tdraw : function(ease){\r\n\t\t\tvar easingDecimal = ease || 1;\r\n\t\t\tthis.clear();\r\n\r\n\t\t\tvar ctx = this.chart.ctx;\r\n\r\n\t\t\t// Some helper methods for getting the next/prev points\r\n\t\t\tvar hasValue = function(item){\r\n\t\t\t\treturn item.value !== null;\r\n\t\t\t},\r\n\t\t\tnextPoint = function(point, collection, index){\r\n\t\t\t\treturn helpers.findNextWhere(collection, hasValue, index) || point;\r\n\t\t\t},\r\n\t\t\tpreviousPoint = function(point, collection, index){\r\n\t\t\t\treturn helpers.findPreviousWhere(collection, hasValue, index) || point;\r\n\t\t\t};\r\n\r\n\t\t\tthis.scale.draw(easingDecimal);\r\n\r\n\r\n\t\t\thelpers.each(this.datasets,function(dataset){\r\n\t\t\t\tvar pointsWithValues = helpers.where(dataset.points, hasValue);\r\n\r\n\t\t\t\t//Transition each point first so that the line and point drawing isn't out of sync\r\n\t\t\t\t//We can use this extra loop to calculate the control points of this dataset also in this loop\r\n\r\n\t\t\t\thelpers.each(dataset.points, function(point, index){\r\n\t\t\t\t\tif (point.hasValue()){\r\n\t\t\t\t\t\tpoint.transition({\r\n\t\t\t\t\t\t\ty : this.scale.calculateY(point.value),\r\n\t\t\t\t\t\t\tx : this.scale.calculateX(index)\r\n\t\t\t\t\t\t}, easingDecimal);\r\n\t\t\t\t\t}\r\n\t\t\t\t},this);\r\n\r\n\r\n\t\t\t\t// Control points need to be calculated in a seperate loop, because we need to know the current x/y of the point\r\n\t\t\t\t// This would cause issues when there is no animation, because the y of the next point would be 0, so beziers would be skewed\r\n\t\t\t\tif (this.options.bezierCurve){\r\n\t\t\t\t\thelpers.each(pointsWithValues, function(point, index){\r\n\t\t\t\t\t\tvar tension = (index > 0 && index < pointsWithValues.length - 1) ? this.options.bezierCurveTension : 0;\r\n\t\t\t\t\t\tpoint.controlPoints = helpers.splineCurve(\r\n\t\t\t\t\t\t\tpreviousPoint(point, pointsWithValues, index),\r\n\t\t\t\t\t\t\tpoint,\r\n\t\t\t\t\t\t\tnextPoint(point, pointsWithValues, index),\r\n\t\t\t\t\t\t\ttension\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t// Prevent the bezier going outside of the bounds of the graph\r\n\r\n\t\t\t\t\t\t// Cap puter bezier handles to the upper/lower scale bounds\r\n\t\t\t\t\t\tif (point.controlPoints.outer.y > this.scale.endPoint){\r\n\t\t\t\t\t\t\tpoint.controlPoints.outer.y = this.scale.endPoint;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (point.controlPoints.outer.y < this.scale.startPoint){\r\n\t\t\t\t\t\t\tpoint.controlPoints.outer.y = this.scale.startPoint;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Cap inner bezier handles to the upper/lower scale bounds\r\n\t\t\t\t\t\tif (point.controlPoints.inner.y > this.scale.endPoint){\r\n\t\t\t\t\t\t\tpoint.controlPoints.inner.y = this.scale.endPoint;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (point.controlPoints.inner.y < this.scale.startPoint){\r\n\t\t\t\t\t\t\tpoint.controlPoints.inner.y = this.scale.startPoint;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},this);\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\t//Draw the line between all the points\r\n\t\t\t\tctx.lineWidth = this.options.datasetStrokeWidth;\r\n\t\t\t\tctx.strokeStyle = dataset.strokeColor;\r\n\t\t\t\tctx.beginPath();\r\n\r\n\t\t\t\thelpers.each(pointsWithValues, function(point, index){\r\n\t\t\t\t\tif (index === 0){\r\n\t\t\t\t\t\tctx.moveTo(point.x, point.y);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tif(this.options.bezierCurve){\r\n\t\t\t\t\t\t\tvar previous = previousPoint(point, pointsWithValues, index);\r\n\r\n\t\t\t\t\t\t\tctx.bezierCurveTo(\r\n\t\t\t\t\t\t\t\tprevious.controlPoints.outer.x,\r\n\t\t\t\t\t\t\t\tprevious.controlPoints.outer.y,\r\n\t\t\t\t\t\t\t\tpoint.controlPoints.inner.x,\r\n\t\t\t\t\t\t\t\tpoint.controlPoints.inner.y,\r\n\t\t\t\t\t\t\t\tpoint.x,\r\n\t\t\t\t\t\t\t\tpoint.y\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\tctx.lineTo(point.x,point.y);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}, this);\r\n\r\n\t\t\t\tctx.stroke();\r\n\r\n\t\t\t\tif (this.options.datasetFill && pointsWithValues.length > 0){\r\n\t\t\t\t\t//Round off the line by going to the base of the chart, back to the start, then fill.\r\n\t\t\t\t\tctx.lineTo(pointsWithValues[pointsWithValues.length - 1].x, this.scale.endPoint);\r\n\t\t\t\t\tctx.lineTo(pointsWithValues[0].x, this.scale.endPoint);\r\n\t\t\t\t\tctx.fillStyle = dataset.fillColor;\r\n\t\t\t\t\tctx.closePath();\r\n\t\t\t\t\tctx.fill();\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//Now draw the points over the line\r\n\t\t\t\t//A little inefficient double looping, but better than the line\r\n\t\t\t\t//lagging behind the point positions\r\n\t\t\t\thelpers.each(pointsWithValues,function(point){\r\n\t\t\t\t\tpoint.draw();\r\n\t\t\t\t});\r\n\t\t\t},this);\r\n\t\t}\r\n\t});\r\n\r\n\r\n}).call(this);\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tvar root = this,\r\n\t\tChart = root.Chart,\r\n\t\t//Cache a local reference to Chart.helpers\r\n\t\thelpers = Chart.helpers;\r\n\r\n\tvar defaultConfig = {\r\n\t\t//Boolean - Show a backdrop to the scale label\r\n\t\tscaleShowLabelBackdrop : true,\r\n\r\n\t\t//String - The colour of the label backdrop\r\n\t\tscaleBackdropColor : \"rgba(255,255,255,0.75)\",\r\n\r\n\t\t// Boolean - Whether the scale should begin at zero\r\n\t\tscaleBeginAtZero : true,\r\n\r\n\t\t//Number - The backdrop padding above & below the label in pixels\r\n\t\tscaleBackdropPaddingY : 2,\r\n\r\n\t\t//Number - The backdrop padding to the side of the label in pixels\r\n\t\tscaleBackdropPaddingX : 2,\r\n\r\n\t\t//Boolean - Show line for each value in the scale\r\n\t\tscaleShowLine : true,\r\n\r\n\t\t//Boolean - Stroke a line around each segment in the chart\r\n\t\tsegmentShowStroke : true,\r\n\r\n\t\t//String - The colour of the stroke on each segement.\r\n\t\tsegmentStrokeColor : \"#fff\",\r\n\r\n\t\t//Number - The width of the stroke value in pixels\r\n\t\tsegmentStrokeWidth : 2,\r\n\r\n\t\t//Number - Amount of animation steps\r\n\t\tanimationSteps : 100,\r\n\r\n\t\t//String - Animation easing effect.\r\n\t\tanimationEasing : \"easeOutBounce\",\r\n\r\n\t\t//Boolean - Whether to animate the rotation of the chart\r\n\t\tanimateRotate : true,\r\n\r\n\t\t//Boolean - Whether to animate scaling the chart from the centre\r\n\t\tanimateScale : false,\r\n\r\n\t\t//String - A legend template\r\n\t\tlegendTemplate : \"<ul class=\\\"<%=name.toLowerCase()%>-legend\\\"><% for (var i=0; i<segments.length; i++){%><li><span style=\\\"background-color:<%=segments[i].fillColor%>\\\"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>\"\r\n\t};\r\n\r\n\r\n\tChart.Type.extend({\r\n\t\t//Passing in a name registers this chart in the Chart namespace\r\n\t\tname: \"PolarArea\",\r\n\t\t//Providing a defaults will also register the deafults in the chart namespace\r\n\t\tdefaults : defaultConfig,\r\n\t\t//Initialize is fired when the chart is initialized - Data is passed in as a parameter\r\n\t\t//Config is automatically merged by the core of Chart.js, and is available at this.options\r\n\t\tinitialize:  function(data){\r\n\t\t\tthis.segments = [];\r\n\t\t\t//Declare segment class as a chart instance specific class, so it can share props for this instance\r\n\t\t\tthis.SegmentArc = Chart.Arc.extend({\r\n\t\t\t\tshowStroke : this.options.segmentShowStroke,\r\n\t\t\t\tstrokeWidth : this.options.segmentStrokeWidth,\r\n\t\t\t\tstrokeColor : this.options.segmentStrokeColor,\r\n\t\t\t\tctx : this.chart.ctx,\r\n\t\t\t\tinnerRadius : 0,\r\n\t\t\t\tx : this.chart.width/2,\r\n\t\t\t\ty : this.chart.height/2\r\n\t\t\t});\r\n\t\t\tthis.scale = new Chart.RadialScale({\r\n\t\t\t\tdisplay: this.options.showScale,\r\n\t\t\t\tfontStyle: this.options.scaleFontStyle,\r\n\t\t\t\tfontSize: this.options.scaleFontSize,\r\n\t\t\t\tfontFamily: this.options.scaleFontFamily,\r\n\t\t\t\tfontColor: this.options.scaleFontColor,\r\n\t\t\t\tshowLabels: this.options.scaleShowLabels,\r\n\t\t\t\tshowLabelBackdrop: this.options.scaleShowLabelBackdrop,\r\n\t\t\t\tbackdropColor: this.options.scaleBackdropColor,\r\n\t\t\t\tbackdropPaddingY : this.options.scaleBackdropPaddingY,\r\n\t\t\t\tbackdropPaddingX: this.options.scaleBackdropPaddingX,\r\n\t\t\t\tlineWidth: (this.options.scaleShowLine) ? this.options.scaleLineWidth : 0,\r\n\t\t\t\tlineColor: this.options.scaleLineColor,\r\n\t\t\t\tlineArc: true,\r\n\t\t\t\twidth: this.chart.width,\r\n\t\t\t\theight: this.chart.height,\r\n\t\t\t\txCenter: this.chart.width/2,\r\n\t\t\t\tyCenter: this.chart.height/2,\r\n\t\t\t\tctx : this.chart.ctx,\r\n\t\t\t\ttemplateString: this.options.scaleLabel,\r\n\t\t\t\tvaluesCount: data.length\r\n\t\t\t});\r\n\r\n\t\t\tthis.updateScaleRange(data);\r\n\r\n\t\t\tthis.scale.update();\r\n\r\n\t\t\thelpers.each(data,function(segment,index){\r\n\t\t\t\tthis.addData(segment,index,true);\r\n\t\t\t},this);\r\n\r\n\t\t\t//Set up tooltip events on the chart\r\n\t\t\tif (this.options.showTooltips){\r\n\t\t\t\thelpers.bindEvents(this, this.options.tooltipEvents, function(evt){\r\n\t\t\t\t\tvar activeSegments = (evt.type !== 'mouseout') ? this.getSegmentsAtEvent(evt) : [];\r\n\t\t\t\t\thelpers.each(this.segments,function(segment){\r\n\t\t\t\t\t\tsegment.restore([\"fillColor\"]);\r\n\t\t\t\t\t});\r\n\t\t\t\t\thelpers.each(activeSegments,function(activeSegment){\r\n\t\t\t\t\t\tactiveSegment.fillColor = activeSegment.highlightColor;\r\n\t\t\t\t\t});\r\n\t\t\t\t\tthis.showTooltip(activeSegments);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis.render();\r\n\t\t},\r\n\t\tgetSegmentsAtEvent : function(e){\r\n\t\t\tvar segmentsArray = [];\r\n\r\n\t\t\tvar location = helpers.getRelativePosition(e);\r\n\r\n\t\t\thelpers.each(this.segments,function(segment){\r\n\t\t\t\tif (segment.inRange(location.x,location.y)) segmentsArray.push(segment);\r\n\t\t\t},this);\r\n\t\t\treturn segmentsArray;\r\n\t\t},\r\n\t\taddData : function(segment, atIndex, silent){\r\n\t\t\tvar index = atIndex || this.segments.length;\r\n\r\n\t\t\tthis.segments.splice(index, 0, new this.SegmentArc({\r\n\t\t\t\tfillColor: segment.color,\r\n\t\t\t\thighlightColor: segment.highlight || segment.color,\r\n\t\t\t\tlabel: segment.label,\r\n\t\t\t\tvalue: segment.value,\r\n\t\t\t\touterRadius: (this.options.animateScale) ? 0 : this.scale.calculateCenterOffset(segment.value),\r\n\t\t\t\tcircumference: (this.options.animateRotate) ? 0 : this.scale.getCircumference(),\r\n\t\t\t\tstartAngle: Math.PI * 1.5\r\n\t\t\t}));\r\n\t\t\tif (!silent){\r\n\t\t\t\tthis.reflow();\r\n\t\t\t\tthis.update();\r\n\t\t\t}\r\n\t\t},\r\n\t\tremoveData: function(atIndex){\r\n\t\t\tvar indexToDelete = (helpers.isNumber(atIndex)) ? atIndex : this.segments.length-1;\r\n\t\t\tthis.segments.splice(indexToDelete, 1);\r\n\t\t\tthis.reflow();\r\n\t\t\tthis.update();\r\n\t\t},\r\n\t\tcalculateTotal: function(data){\r\n\t\t\tthis.total = 0;\r\n\t\t\thelpers.each(data,function(segment){\r\n\t\t\t\tthis.total += segment.value;\r\n\t\t\t},this);\r\n\t\t\tthis.scale.valuesCount = this.segments.length;\r\n\t\t},\r\n\t\tupdateScaleRange: function(datapoints){\r\n\t\t\tvar valuesArray = [];\r\n\t\t\thelpers.each(datapoints,function(segment){\r\n\t\t\t\tvaluesArray.push(segment.value);\r\n\t\t\t});\r\n\r\n\t\t\tvar scaleSizes = (this.options.scaleOverride) ?\r\n\t\t\t\t{\r\n\t\t\t\t\tsteps: this.options.scaleSteps,\r\n\t\t\t\t\tstepValue: this.options.scaleStepWidth,\r\n\t\t\t\t\tmin: this.options.scaleStartValue,\r\n\t\t\t\t\tmax: this.options.scaleStartValue + (this.options.scaleSteps * this.options.scaleStepWidth)\r\n\t\t\t\t} :\r\n\t\t\t\thelpers.calculateScaleRange(\r\n\t\t\t\t\tvaluesArray,\r\n\t\t\t\t\thelpers.min([this.chart.width, this.chart.height])/2,\r\n\t\t\t\t\tthis.options.scaleFontSize,\r\n\t\t\t\t\tthis.options.scaleBeginAtZero,\r\n\t\t\t\t\tthis.options.scaleIntegersOnly\r\n\t\t\t\t);\r\n\r\n\t\t\thelpers.extend(\r\n\t\t\t\tthis.scale,\r\n\t\t\t\tscaleSizes,\r\n\t\t\t\t{\r\n\t\t\t\t\tsize: helpers.min([this.chart.width, this.chart.height]),\r\n\t\t\t\t\txCenter: this.chart.width/2,\r\n\t\t\t\t\tyCenter: this.chart.height/2\r\n\t\t\t\t}\r\n\t\t\t);\r\n\r\n\t\t},\r\n\t\tupdate : function(){\r\n\t\t\tthis.calculateTotal(this.segments);\r\n\r\n\t\t\thelpers.each(this.segments,function(segment){\r\n\t\t\t\tsegment.save();\r\n\t\t\t});\r\n\t\t\tthis.render();\r\n\t\t},\r\n\t\treflow : function(){\r\n\t\t\thelpers.extend(this.SegmentArc.prototype,{\r\n\t\t\t\tx : this.chart.width/2,\r\n\t\t\t\ty : this.chart.height/2\r\n\t\t\t});\r\n\t\t\tthis.updateScaleRange(this.segments);\r\n\t\t\tthis.scale.update();\r\n\r\n\t\t\thelpers.extend(this.scale,{\r\n\t\t\t\txCenter: this.chart.width/2,\r\n\t\t\t\tyCenter: this.chart.height/2\r\n\t\t\t});\r\n\r\n\t\t\thelpers.each(this.segments, function(segment){\r\n\t\t\t\tsegment.update({\r\n\t\t\t\t\touterRadius : this.scale.calculateCenterOffset(segment.value)\r\n\t\t\t\t});\r\n\t\t\t}, this);\r\n\r\n\t\t},\r\n\t\tdraw : function(ease){\r\n\t\t\tvar easingDecimal = ease || 1;\r\n\t\t\t//Clear & draw the canvas\r\n\t\t\tthis.clear();\r\n\t\t\thelpers.each(this.segments,function(segment, index){\r\n\t\t\t\tsegment.transition({\r\n\t\t\t\t\tcircumference : this.scale.getCircumference(),\r\n\t\t\t\t\touterRadius : this.scale.calculateCenterOffset(segment.value)\r\n\t\t\t\t},easingDecimal);\r\n\r\n\t\t\t\tsegment.endAngle = segment.startAngle + segment.circumference;\r\n\r\n\t\t\t\t// If we've removed the first segment we need to set the first one to\r\n\t\t\t\t// start at the top.\r\n\t\t\t\tif (index === 0){\r\n\t\t\t\t\tsegment.startAngle = Math.PI * 1.5;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//Check to see if it's the last segment, if not get the next and update the start angle\r\n\t\t\t\tif (index < this.segments.length - 1){\r\n\t\t\t\t\tthis.segments[index+1].startAngle = segment.endAngle;\r\n\t\t\t\t}\r\n\t\t\t\tsegment.draw();\r\n\t\t\t}, this);\r\n\t\t\tthis.scale.draw();\r\n\t\t}\r\n\t});\r\n\r\n}).call(this);\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tvar root = this,\r\n\t\tChart = root.Chart,\r\n\t\thelpers = Chart.helpers;\r\n\r\n\r\n\r\n\tChart.Type.extend({\r\n\t\tname: \"Radar\",\r\n\t\tdefaults:{\r\n\t\t\t//Boolean - Whether to show lines for each scale point\r\n\t\t\tscaleShowLine : true,\r\n\r\n\t\t\t//Boolean - Whether we show the angle lines out of the radar\r\n\t\t\tangleShowLineOut : true,\r\n\r\n\t\t\t//Boolean - Whether to show labels on the scale\r\n\t\t\tscaleShowLabels : false,\r\n\r\n\t\t\t// Boolean - Whether the scale should begin at zero\r\n\t\t\tscaleBeginAtZero : true,\r\n\r\n\t\t\t//String - Colour of the angle line\r\n\t\t\tangleLineColor : \"rgba(0,0,0,.1)\",\r\n\r\n\t\t\t//Number - Pixel width of the angle line\r\n\t\t\tangleLineWidth : 1,\r\n\r\n\t\t\t//String - Point label font declaration\r\n\t\t\tpointLabelFontFamily : \"'Arial'\",\r\n\r\n\t\t\t//String - Point label font weight\r\n\t\t\tpointLabelFontStyle : \"normal\",\r\n\r\n\t\t\t//Number - Point label font size in pixels\r\n\t\t\tpointLabelFontSize : 10,\r\n\r\n\t\t\t//String - Point label font colour\r\n\t\t\tpointLabelFontColor : \"#666\",\r\n\r\n\t\t\t//Boolean - Whether to show a dot for each point\r\n\t\t\tpointDot : true,\r\n\r\n\t\t\t//Number - Radius of each point dot in pixels\r\n\t\t\tpointDotRadius : 3,\r\n\r\n\t\t\t//Number - Pixel width of point dot stroke\r\n\t\t\tpointDotStrokeWidth : 1,\r\n\r\n\t\t\t//Number - amount extra to add to the radius to cater for hit detection outside the drawn point\r\n\t\t\tpointHitDetectionRadius : 20,\r\n\r\n\t\t\t//Boolean - Whether to show a stroke for datasets\r\n\t\t\tdatasetStroke : true,\r\n\r\n\t\t\t//Number - Pixel width of dataset stroke\r\n\t\t\tdatasetStrokeWidth : 2,\r\n\r\n\t\t\t//Boolean - Whether to fill the dataset with a colour\r\n\t\t\tdatasetFill : true,\r\n\r\n\t\t\t//String - A legend template\r\n\t\t\tlegendTemplate : \"<ul class=\\\"<%=name.toLowerCase()%>-legend\\\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\\\"background-color:<%=datasets[i].strokeColor%>\\\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>\"\r\n\r\n\t\t},\r\n\r\n\t\tinitialize: function(data){\r\n\t\t\tthis.PointClass = Chart.Point.extend({\r\n\t\t\t\tstrokeWidth : this.options.pointDotStrokeWidth,\r\n\t\t\t\tradius : this.options.pointDotRadius,\r\n\t\t\t\tdisplay: this.options.pointDot,\r\n\t\t\t\thitDetectionRadius : this.options.pointHitDetectionRadius,\r\n\t\t\t\tctx : this.chart.ctx\r\n\t\t\t});\r\n\r\n\t\t\tthis.datasets = [];\r\n\r\n\t\t\tthis.buildScale(data);\r\n\r\n\t\t\t//Set up tooltip events on the chart\r\n\t\t\tif (this.options.showTooltips){\r\n\t\t\t\thelpers.bindEvents(this, this.options.tooltipEvents, function(evt){\r\n\t\t\t\t\tvar activePointsCollection = (evt.type !== 'mouseout') ? this.getPointsAtEvent(evt) : [];\r\n\r\n\t\t\t\t\tthis.eachPoints(function(point){\r\n\t\t\t\t\t\tpoint.restore(['fillColor', 'strokeColor']);\r\n\t\t\t\t\t});\r\n\t\t\t\t\thelpers.each(activePointsCollection, function(activePoint){\r\n\t\t\t\t\t\tactivePoint.fillColor = activePoint.highlightFill;\r\n\t\t\t\t\t\tactivePoint.strokeColor = activePoint.highlightStroke;\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tthis.showTooltip(activePointsCollection);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\t//Iterate through each of the datasets, and build this into a property of the chart\r\n\t\t\thelpers.each(data.datasets,function(dataset){\r\n\r\n\t\t\t\tvar datasetObject = {\r\n\t\t\t\t\tlabel: dataset.label || null,\r\n\t\t\t\t\tfillColor : dataset.fillColor,\r\n\t\t\t\t\tstrokeColor : dataset.strokeColor,\r\n\t\t\t\t\tpointColor : dataset.pointColor,\r\n\t\t\t\t\tpointStrokeColor : dataset.pointStrokeColor,\r\n\t\t\t\t\tpoints : []\r\n\t\t\t\t};\r\n\r\n\t\t\t\tthis.datasets.push(datasetObject);\r\n\r\n\t\t\t\thelpers.each(dataset.data,function(dataPoint,index){\r\n\t\t\t\t\t//Add a new point for each piece of data, passing any required data to draw.\r\n\t\t\t\t\tvar pointPosition;\r\n\t\t\t\t\tif (!this.scale.animation){\r\n\t\t\t\t\t\tpointPosition = this.scale.getPointPosition(index, this.scale.calculateCenterOffset(dataPoint));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdatasetObject.points.push(new this.PointClass({\r\n\t\t\t\t\t\tvalue : dataPoint,\r\n\t\t\t\t\t\tlabel : data.labels[index],\r\n\t\t\t\t\t\tdatasetLabel: dataset.label,\r\n\t\t\t\t\t\tx: (this.options.animation) ? this.scale.xCenter : pointPosition.x,\r\n\t\t\t\t\t\ty: (this.options.animation) ? this.scale.yCenter : pointPosition.y,\r\n\t\t\t\t\t\tstrokeColor : dataset.pointStrokeColor,\r\n\t\t\t\t\t\tfillColor : dataset.pointColor,\r\n\t\t\t\t\t\thighlightFill : dataset.pointHighlightFill || dataset.pointColor,\r\n\t\t\t\t\t\thighlightStroke : dataset.pointHighlightStroke || dataset.pointStrokeColor\r\n\t\t\t\t\t}));\r\n\t\t\t\t},this);\r\n\r\n\t\t\t},this);\r\n\r\n\t\t\tthis.render();\r\n\t\t},\r\n\t\teachPoints : function(callback){\r\n\t\t\thelpers.each(this.datasets,function(dataset){\r\n\t\t\t\thelpers.each(dataset.points,callback,this);\r\n\t\t\t},this);\r\n\t\t},\r\n\r\n\t\tgetPointsAtEvent : function(evt){\r\n\t\t\tvar mousePosition = helpers.getRelativePosition(evt),\r\n\t\t\t\tfromCenter = helpers.getAngleFromPoint({\r\n\t\t\t\t\tx: this.scale.xCenter,\r\n\t\t\t\t\ty: this.scale.yCenter\r\n\t\t\t\t}, mousePosition);\r\n\r\n\t\t\tvar anglePerIndex = (Math.PI * 2) /this.scale.valuesCount,\r\n\t\t\t\tpointIndex = Math.round((fromCenter.angle - Math.PI * 1.5) / anglePerIndex),\r\n\t\t\t\tactivePointsCollection = [];\r\n\r\n\t\t\t// If we're at the top, make the pointIndex 0 to get the first of the array.\r\n\t\t\tif (pointIndex >= this.scale.valuesCount || pointIndex < 0){\r\n\t\t\t\tpointIndex = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (fromCenter.distance <= this.scale.drawingArea){\r\n\t\t\t\thelpers.each(this.datasets, function(dataset){\r\n\t\t\t\t\tactivePointsCollection.push(dataset.points[pointIndex]);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\treturn activePointsCollection;\r\n\t\t},\r\n\r\n\t\tbuildScale : function(data){\r\n\t\t\tthis.scale = new Chart.RadialScale({\r\n\t\t\t\tdisplay: this.options.showScale,\r\n\t\t\t\tfontStyle: this.options.scaleFontStyle,\r\n\t\t\t\tfontSize: this.options.scaleFontSize,\r\n\t\t\t\tfontFamily: this.options.scaleFontFamily,\r\n\t\t\t\tfontColor: this.options.scaleFontColor,\r\n\t\t\t\tshowLabels: this.options.scaleShowLabels,\r\n\t\t\t\tshowLabelBackdrop: this.options.scaleShowLabelBackdrop,\r\n\t\t\t\tbackdropColor: this.options.scaleBackdropColor,\r\n\t\t\t\tbackdropPaddingY : this.options.scaleBackdropPaddingY,\r\n\t\t\t\tbackdropPaddingX: this.options.scaleBackdropPaddingX,\r\n\t\t\t\tlineWidth: (this.options.scaleShowLine) ? this.options.scaleLineWidth : 0,\r\n\t\t\t\tlineColor: this.options.scaleLineColor,\r\n\t\t\t\tangleLineColor : this.options.angleLineColor,\r\n\t\t\t\tangleLineWidth : (this.options.angleShowLineOut) ? this.options.angleLineWidth : 0,\r\n\t\t\t\t// Point labels at the edge of each line\r\n\t\t\t\tpointLabelFontColor : this.options.pointLabelFontColor,\r\n\t\t\t\tpointLabelFontSize : this.options.pointLabelFontSize,\r\n\t\t\t\tpointLabelFontFamily : this.options.pointLabelFontFamily,\r\n\t\t\t\tpointLabelFontStyle : this.options.pointLabelFontStyle,\r\n\t\t\t\theight : this.chart.height,\r\n\t\t\t\twidth: this.chart.width,\r\n\t\t\t\txCenter: this.chart.width/2,\r\n\t\t\t\tyCenter: this.chart.height/2,\r\n\t\t\t\tctx : this.chart.ctx,\r\n\t\t\t\ttemplateString: this.options.scaleLabel,\r\n\t\t\t\tlabels: data.labels,\r\n\t\t\t\tvaluesCount: data.datasets[0].data.length\r\n\t\t\t});\r\n\r\n\t\t\tthis.scale.setScaleSize();\r\n\t\t\tthis.updateScaleRange(data.datasets);\r\n\t\t\tthis.scale.buildYLabels();\r\n\t\t},\r\n\t\tupdateScaleRange: function(datasets){\r\n\t\t\tvar valuesArray = (function(){\r\n\t\t\t\tvar totalDataArray = [];\r\n\t\t\t\thelpers.each(datasets,function(dataset){\r\n\t\t\t\t\tif (dataset.data){\r\n\t\t\t\t\t\ttotalDataArray = totalDataArray.concat(dataset.data);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\thelpers.each(dataset.points, function(point){\r\n\t\t\t\t\t\t\ttotalDataArray.push(point.value);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\treturn totalDataArray;\r\n\t\t\t})();\r\n\r\n\r\n\t\t\tvar scaleSizes = (this.options.scaleOverride) ?\r\n\t\t\t\t{\r\n\t\t\t\t\tsteps: this.options.scaleSteps,\r\n\t\t\t\t\tstepValue: this.options.scaleStepWidth,\r\n\t\t\t\t\tmin: this.options.scaleStartValue,\r\n\t\t\t\t\tmax: this.options.scaleStartValue + (this.options.scaleSteps * this.options.scaleStepWidth)\r\n\t\t\t\t} :\r\n\t\t\t\thelpers.calculateScaleRange(\r\n\t\t\t\t\tvaluesArray,\r\n\t\t\t\t\thelpers.min([this.chart.width, this.chart.height])/2,\r\n\t\t\t\t\tthis.options.scaleFontSize,\r\n\t\t\t\t\tthis.options.scaleBeginAtZero,\r\n\t\t\t\t\tthis.options.scaleIntegersOnly\r\n\t\t\t\t);\r\n\r\n\t\t\thelpers.extend(\r\n\t\t\t\tthis.scale,\r\n\t\t\t\tscaleSizes\r\n\t\t\t);\r\n\r\n\t\t},\r\n\t\taddData : function(valuesArray,label){\r\n\t\t\t//Map the values array for each of the datasets\r\n\t\t\tthis.scale.valuesCount++;\r\n\t\t\thelpers.each(valuesArray,function(value,datasetIndex){\r\n\t\t\t\tvar pointPosition = this.scale.getPointPosition(this.scale.valuesCount, this.scale.calculateCenterOffset(value));\r\n\t\t\t\tthis.datasets[datasetIndex].points.push(new this.PointClass({\r\n\t\t\t\t\tvalue : value,\r\n\t\t\t\t\tlabel : label,\r\n\t\t\t\t\tx: pointPosition.x,\r\n\t\t\t\t\ty: pointPosition.y,\r\n\t\t\t\t\tstrokeColor : this.datasets[datasetIndex].pointStrokeColor,\r\n\t\t\t\t\tfillColor : this.datasets[datasetIndex].pointColor\r\n\t\t\t\t}));\r\n\t\t\t},this);\r\n\r\n\t\t\tthis.scale.labels.push(label);\r\n\r\n\t\t\tthis.reflow();\r\n\r\n\t\t\tthis.update();\r\n\t\t},\r\n\t\tremoveData : function(){\r\n\t\t\tthis.scale.valuesCount--;\r\n\t\t\tthis.scale.labels.shift();\r\n\t\t\thelpers.each(this.datasets,function(dataset){\r\n\t\t\t\tdataset.points.shift();\r\n\t\t\t},this);\r\n\t\t\tthis.reflow();\r\n\t\t\tthis.update();\r\n\t\t},\r\n\t\tupdate : function(){\r\n\t\t\tthis.eachPoints(function(point){\r\n\t\t\t\tpoint.save();\r\n\t\t\t});\r\n\t\t\tthis.reflow();\r\n\t\t\tthis.render();\r\n\t\t},\r\n\t\treflow: function(){\r\n\t\t\thelpers.extend(this.scale, {\r\n\t\t\t\twidth : this.chart.width,\r\n\t\t\t\theight: this.chart.height,\r\n\t\t\t\tsize : helpers.min([this.chart.width, this.chart.height]),\r\n\t\t\t\txCenter: this.chart.width/2,\r\n\t\t\t\tyCenter: this.chart.height/2\r\n\t\t\t});\r\n\t\t\tthis.updateScaleRange(this.datasets);\r\n\t\t\tthis.scale.setScaleSize();\r\n\t\t\tthis.scale.buildYLabels();\r\n\t\t},\r\n\t\tdraw : function(ease){\r\n\t\t\tvar easeDecimal = ease || 1,\r\n\t\t\t\tctx = this.chart.ctx;\r\n\t\t\tthis.clear();\r\n\t\t\tthis.scale.draw();\r\n\r\n\t\t\thelpers.each(this.datasets,function(dataset){\r\n\r\n\t\t\t\t//Transition each point first so that the line and point drawing isn't out of sync\r\n\t\t\t\thelpers.each(dataset.points,function(point,index){\r\n\t\t\t\t\tif (point.hasValue()){\r\n\t\t\t\t\t\tpoint.transition(this.scale.getPointPosition(index, this.scale.calculateCenterOffset(point.value)), easeDecimal);\r\n\t\t\t\t\t}\r\n\t\t\t\t},this);\r\n\r\n\r\n\r\n\t\t\t\t//Draw the line between all the points\r\n\t\t\t\tctx.lineWidth = this.options.datasetStrokeWidth;\r\n\t\t\t\tctx.strokeStyle = dataset.strokeColor;\r\n\t\t\t\tctx.beginPath();\r\n\t\t\t\thelpers.each(dataset.points,function(point,index){\r\n\t\t\t\t\tif (index === 0){\r\n\t\t\t\t\t\tctx.moveTo(point.x,point.y);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tctx.lineTo(point.x,point.y);\r\n\t\t\t\t\t}\r\n\t\t\t\t},this);\r\n\t\t\t\tctx.closePath();\r\n\t\t\t\tctx.stroke();\r\n\r\n\t\t\t\tctx.fillStyle = dataset.fillColor;\r\n\t\t\t\tctx.fill();\r\n\r\n\t\t\t\t//Now draw the points over the line\r\n\t\t\t\t//A little inefficient double looping, but better than the line\r\n\t\t\t\t//lagging behind the point positions\r\n\t\t\t\thelpers.each(dataset.points,function(point){\r\n\t\t\t\t\tif (point.hasValue()){\r\n\t\t\t\t\t\tpoint.draw();\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t},this);\r\n\r\n\t\t}\r\n\r\n\t});\r\n\r\n\r\n\r\n\r\n\r\n}).call(this);\r\n","'use strict';\r\n\r\nangular.module('chartjs-directive', []).\r\n  directive('chart', function () {\r\n    var baseWidth = 600;\r\n    var baseHeight = 400;\r\n    \r\n    return {\r\n      restrict: 'E',\r\n      template: '<canvas></canvas>',\r\n      scope: {\r\n        chartObject: \"=value\",\r\n        chartOptions: '=options'\r\n      },\r\n      link: function (scope, element, attrs) {\r\n        var canvas  = element.find('canvas')[0],\r\n            context = canvas.getContext('2d'),\r\n            chart;\r\n\r\n        var options = {\r\n          type:   attrs.type   || \"Line\",\r\n          width:  attrs.width  || baseWidth,\r\n          height: attrs.height || baseHeight\r\n        };\r\n        canvas.width = options.width;\r\n        canvas.height = options.height;\r\n        chart = new Chart(context);\r\n\r\n        scope.$watch(function(){ return element.attr('type'); }, function(value){\r\n          if(!value) return;\r\n          options.type = value;\r\n          var chartType = options.type;\r\n          scope.chart = chart[chartType]({'datasets' : [scope.chartObject], 'labels' : []}, scope.chartOptions);\r\n        });\r\n\r\n        //Update when charts data changes\r\n        scope.$watch(function() { return scope.chartObject; }, function(value) {\r\n          scope.chart.scale.beginAtZero = false\r\n          if(!value) return;\r\n          var chartType = options.type;\r\n          if (scope.chart) {\r\n            if(scope.chart.segments) {\r\n              scope.chart.segments.forEach(function(segment, idx) {\r\n                angular.extend(segment,scope.chartObject.data[idx]);\r\n              });\r\n            } else if (scope.chart.datasets) {\r\n\r\n              scope.chart.datasets.forEach(function(dataset, dsid) {\r\n                var nset = scope.chartObject;\r\n                  nset.forEach(function(point, idx) {\r\n                    var values = (dataset.points)? dataset.points : dataset.bars;\r\n                    if(idx < values.length)\r\n                      values[idx].value = nset[idx];\r\n                    else\r\n                      scope.chart.addData([nset[idx]],'');\r\n                  });\r\n\r\n              });\r\n            }\r\n            scope.chart.update();\r\n          } else\r\n            scope.chart = chart[chartType](\r\n              {'labels' : [] , 'datasets' : [scope.chartObject]}\r\n              , scope.chartOptions\r\n            );\r\n        },true);\r\n      }\r\n    }\r\n  });\r\n","//based on https://stackoverflow.com/questions/18839048/how-to-read-a-file-in-angularjs\r\nangular.module(\"file-loader\",[]).directive('fileLoader', ['$window', function ($window) {\r\n    return {\r\n        restrict: 'A',\r\n        require: 'ngModel',\r\n        link: function (scope, el, attr, ctrl) {\r\n            var fileReader = new $window.FileReader();\r\n\r\n            fileReader.onload = function () {\r\n                ctrl.$setViewValue(fileReader.result);\r\n\r\n                if ('fileLoaded' in attr) {\r\n                  scope.$apply(function() {\r\n                    scope.$eval(attr['fileLoaded']);\r\n                  });\r\n                }\r\n            };\r\n\r\n            fileReader.onprogress = function (event) {\r\n              scope.$apply(function() {\r\n                if ('fileProgress' in attr) {\r\n                    scope.$eval(attr['fileProgress'], {'$total': event.total, '$loaded': event.loaded});\r\n                }\r\n              });\r\n            };\r\n\r\n            fileReader.onerror = function () {\r\n              scope.$apply(function() {\r\n                if ('fileError' in attr) {\r\n                    scope.$eval(attr['fileError'], {'$error': fileReader.error});\r\n                }\r\n              });\r\n            };\r\n\r\n            var fileType = attr['fileLoader'];\r\n\r\n            el.bind('change', function (e) {\r\n                var fileName = e.target.files[0];\r\n\r\n                if (fileType === '' || fileType === 'text') {\r\n                    fileReader.readAsText(fileName);\r\n                } else if (fileType === 'data') {\r\n                    fileReader.readAsDataURL(fileName);\r\n                }\r\n            });\r\n        }\r\n    };\r\n}]);\r\n","angular\r\n    .module('thingclient', ['ngMaterial', 'chartjs-directive', 'file-loader', 'wot'])\r\n    .config(['$mdThemingProvider',\r\n        function($mdThemingProvider) {\r\n            $mdThemingProvider.theme('default')\r\n                .primaryPalette('blue-grey')\r\n                .accentPalette('grey');\r\n        }]\r\n    );","angular.module(\"thingclient\").controller('ThingClientCtrl',\r\n    ['$scope', '$interval', '$http' , '$mdSidenav', '$mdDialog', '$mdToast', 'TdParser', 'ThingClient',\r\n        function ThingClientCtrl($scope, $interval, $http ,$mdSidenav, $mdDialog, $mdToast, TdParser, ThingClient) {\r\n            var self = this;\r\n            $scope.things = [];\r\n            self.selected = {};\r\n            self.autoReloaded = [];\r\n\r\n            var showRestError = function showRestError(errorObj) {\r\n                msg = errorObj.config.method + \" to \" + errorObj.config.url + \" failed.<br/>\";\r\n                msg += errorObj.status + \" \" + errorObj.statusText\r\n                showError(msg);\r\n            }\r\n\r\n            var showError = function showError(errorMsg) {\r\n                $mdToast.showSimple(errorMsg);\r\n            }\r\n\r\n            var reloadAuto = function reloadAuto() {\r\n                self.autoReloaded.forEach(function(property) {\r\n                    ThingClient.readProperty(property.parent, property).catch(showRestError);\r\n                });\r\n            }\r\n\r\n            $interval(reloadAuto, 1000);\r\n\r\n            self.addThingFromUrl = function addThingFromUrl(url) {\r\n                TdParser.fromUrl(url).then(self.addThing).catch(showRestError);\r\n            }\r\n\r\n            self.addThingFromJson = function addThingFromJson(json) {\r\n                self.addThing(TdParser.parseJson(json));\r\n            }\r\n            \r\n            self.addThingFromObject = function addThingFromObject(td) {\r\n                self.addThing(TdParser.createThing(td));\r\n            }\r\n\r\n            self.addThing = function addThing(thing) {\r\n                $scope.things.push(thing);\r\n                self.selected = thing;\r\n            }\r\n\r\n            self.updateState = function updateState() {\r\n                self.selected.properties.forEach(function(property) {\r\n                    ThingClient.readProperty(self.selected, property).catch(showRestError);\r\n                });\r\n            }\r\n\r\n            self.readProperty = function readProperty(property) {\r\n                ThingClient.readProperty(self.selected, property).catch(showRestError);\r\n            }\r\n\r\n            self.writeProperty = function writeProperty(property) {\r\n                ThingClient.writeProperty(self.selected, property).catch(showRestError);\r\n            }\r\n\r\n            self.callAction = function callAction(action, param) {\r\n                ThingClient.callAction(self.selected, action, param).catch(showRestError);\r\n            }\r\n\r\n            self.toggleList = function toggleList() {\r\n                $mdSidenav('left').toggle()\r\n            };\r\n\r\n            self.selectThing = function selectThing(thing) {\r\n                self.selected = thing;\r\n            };\r\n\r\n            self.openUriDialog = function openUriDialog($event) {\r\n                $mdDialog.show({\r\n                    clickOutsideToClose: true,\r\n                    controller: function($mdDialog) {\r\n                        // Save the clicked item\r\n                        this.uri = \"\";\r\n                        // Setup some handlers\r\n                        this.close = function() {\r\n                            $mdDialog.cancel();\r\n                        };\r\n                        this.submit = function() {\r\n                            $mdDialog.hide();\r\n                            self.addThingFromUrl(this.uri);\r\n                        };\r\n                    },\r\n                    controllerAs: 'dialog',\r\n                    templateUrl: 'uridialog.html',\r\n                    targetEvent: $event\r\n                });\r\n            }\r\n\r\n            self.addFileFromPicker = function addFileFromPicker(filePickerId) {\r\n                angular.element(document.querySelector('#' + filePickerId))[0].click();\r\n            }\r\n\r\n            self.toggleAuto = function toggleAuto(property) {\r\n                property.autoUpdate = !property.autoUpdate;\r\n                if (property.autoUpdate) {\r\n                    self.autoReloaded.push(property);\r\n                } else {\r\n                    var idx = autoReloaded.indexOf(property);\r\n                    if (idx > -1)\r\n                        self.autoReloaded.splice(idx, 1); //remove property\r\n                }\r\n            }\r\n            \r\n            self.addCatalog = function addCatalog($event) {\r\n                $mdDialog.show({\r\n                    clickOutsideToClose: true,\r\n                    controller: function($mdDialog) {\r\n                        // Save the clicked item\r\n                        this.uri = \"\";\r\n                        // Setup some handlers\r\n                        this.close = function() {\r\n                            $mdDialog.cancel();\r\n                        };\r\n                        this.submit = function() {\r\n                            $mdDialog.hide();\r\n                            $http.get(this.uri)\r\n                            .then(function(response) {\r\n                                var catalog = response.data;\r\n                                for(var name in catalog) {\r\n                                    console.log(\"found \" + name);\r\n                                    self.addThingFromObject(catalog[name]);    \r\n                                }\r\n                            })\r\n                            .catch(showRestError);\r\n                        };\r\n                    },\r\n                    controllerAs: 'dialog',\r\n                    templateUrl: 'uridialog.html',\r\n                    targetEvent: $event\r\n                });\r\n            }\r\n\r\n            return self;\r\n        }\r\n    ]\r\n);\r\n"],"sourceRoot":"/source/"}